//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: ElementForm.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "ElementFormBase.h"

// Declare the bitmap loading function
extern void wxC9EE9InitBitmapResources();

static bool bBitmapLoaded = false;

BusFormBase::BusFormBase(wxWindow* parent,
                         wxWindowID id,
                         const wxString& title,
                         const wxPoint& pos,
                         const wxSize& size,
                         long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextName = new wxStaticText(m_panelGeneral, wxID_ANY, _("Name"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextName, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlName = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                    wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlName->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlName, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlName->SetMinSize(wxSize(300, -1));

    wxGridSizer* gridSizerLvl3_1 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_1->Add(gridSizerLvl3_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_1 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextNomVoltage = new wxStaticText(m_panelGeneral, wxID_ANY, _("Rated voltage"), wxDefaultPosition,
                                              wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_1->Add(m_staticTextNomVoltage, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_1->Add(boxSizerLvl5_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlNomVoltage = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlNomVoltage->SetHint(wxT(""));
#endif

    boxSizerLvl5_1->Add(m_textCtrlNomVoltage, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceNomVoltageArr;
    m_choiceNomVoltageArr.Add(wxT("V"));
    m_choiceNomVoltageArr.Add(wxT("kV"));
    m_choiceNomVoltage = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                      wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceNomVoltageArr, 0);
    m_choiceNomVoltage->SetSelection(1);

    boxSizerLvl5_1->Add(m_choiceNomVoltage, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_2 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxCtrlVoltage = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Controlled voltage"), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    m_checkBoxCtrlVoltage->SetValue(false);

    boxSizerLvl4_2->Add(m_checkBoxCtrlVoltage, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_2->Add(boxSizerLvl5_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlCtrlVoltage = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlCtrlVoltage->SetHint(wxT(""));
#endif

    boxSizerLvl5_2->Add(m_textCtrlCtrlVoltage, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceCtrlVoltageArr;
    m_choiceCtrlVoltageArr.Add(wxT("p.u."));
    m_choiceCtrlVoltageArr.Add(wxT("kV"));
    m_choiceCtrlVoltage = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceCtrlVoltageArr, 0);
    m_choiceCtrlVoltage->SetSelection(0);

    boxSizerLvl5_2->Add(m_choiceCtrlVoltage, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    m_checkBoxSlackBus = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Slack Bus"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    m_checkBoxSlackBus->SetValue(false);

    boxSizerLvl2_1->Add(m_checkBoxSlackBus, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_panelFault =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelFault, _("Fault"), false);

    wxBoxSizer* boxSizerLvl2_2 = new wxBoxSizer(wxVERTICAL);
    m_panelFault->SetSizer(boxSizerLvl2_2);

    m_checkBoxFault = new wxCheckBox(m_panelFault, wxID_ANY, _("Insert fault in the bus"), wxDefaultPosition,
                                     wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
    m_checkBoxFault->SetValue(false);

    boxSizerLvl2_2->Add(m_checkBoxFault, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl3_2 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_2->Add(gridSizerLvl3_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_3 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextFaultType = new wxStaticText(m_panelFault, wxID_ANY, _("Fault type"), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_3->Add(m_staticTextFaultType, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceFaultTypeArr;
    m_choiceFaultTypeArr.Add(wxT("Three-phase"));
    m_choiceFaultTypeArr.Add(wxT("Line-to-line"));
    m_choiceFaultTypeArr.Add(wxT("Double line-to-ground"));
    m_choiceFaultTypeArr.Add(wxT("Line-to-ground"));
    m_choiceFaultType = new wxChoice(m_panelFault, wxID_ANY, wxDefaultPosition,
                                     wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), m_choiceFaultTypeArr, 0);
    m_choiceFaultType->SetSelection(0);

    boxSizerLvl4_3->Add(m_choiceFaultType, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_4 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextFaultPlace = new wxStaticText(m_panelFault, wxID_ANY, _("Fault place"), wxDefaultPosition,
                                              wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_4->Add(m_staticTextFaultPlace, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceFaultPlaceArr;
    m_choiceFaultPlaceArr.Add(wxT("Line A"));
    m_choiceFaultPlaceArr.Add(wxT("Line B"));
    m_choiceFaultPlaceArr.Add(wxT("Line C"));
    m_choiceFaultPlace = new wxChoice(m_panelFault, wxID_ANY, wxDefaultPosition,
                                      wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), m_choiceFaultPlaceArr, 0);
    m_choiceFaultPlace->SetSelection(0);

    boxSizerLvl4_4->Add(m_choiceFaultPlace, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_5 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextFaultResistance = new wxStaticText(m_panelFault, wxID_ANY, _("Fault resistance (R)"), wxDefaultPosition,
                                                   wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_5->Add(m_staticTextFaultResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_3 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_5->Add(boxSizerLvl5_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlFaultResistance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlFaultResistance->SetHint(wxT(""));
#endif

    boxSizerLvl5_3->Add(m_textCtrlFaultResistance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPU_1 = new wxStaticText(m_panelFault, wxID_ANY, _("p.u."), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl5_3->Add(m_staticTextPU_1, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_6 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextReactance = new wxStaticText(m_panelFault, wxID_ANY, _("Fault reactance (Xl)"), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_6->Add(m_staticTextReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_4 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_6->Add(boxSizerLvl5_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlFaultReactance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlFaultReactance->SetHint(wxT(""));
#endif

    boxSizerLvl5_4->Add(m_textCtrlFaultReactance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPU_2 = new wxStaticText(m_panelFault, wxID_ANY, _("p.u."), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl5_4->Add(m_staticTextPU_2, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_panelStability =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelStability, _("Stability"), false);

    wxBoxSizer* boxSizerLvl2_3 = new wxBoxSizer(wxVERTICAL);
    m_panelStability->SetSizer(boxSizerLvl2_3);

    m_checkBoxPlotData = new wxCheckBox(m_panelStability, wxID_ANY, _("Plot bus data"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
    m_checkBoxPlotData->SetValue(false);

    boxSizerLvl2_3->Add(m_checkBoxPlotData, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_checkBoxStabFault = new wxCheckBox(m_panelStability, wxID_ANY, _("Insert fault in the bus"), wxDefaultPosition,
                                         wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
    m_checkBoxStabFault->SetValue(false);

    boxSizerLvl2_3->Add(m_checkBoxStabFault, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl3_3 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_3->Add(gridSizerLvl3_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_7 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_3->Add(boxSizerLvl4_7, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextStabFaultTime = new wxStaticText(m_panelStability, wxID_ANY, _("Time"), wxDefaultPosition,
                                                 wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl4_7->Add(m_staticTextStabFaultTime, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_5 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_7->Add(boxSizerLvl5_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlStabFaultTime = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlStabFaultTime->SetHint(wxT(""));
#endif

    boxSizerLvl5_5->Add(m_textCtrlStabFaultTime, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextS_1 = new wxStaticText(m_panelStability, wxID_ANY, _("s"), wxDefaultPosition,
                                       wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_5->Add(m_staticTextS_1, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_8 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_3->Add(boxSizerLvl4_8, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextStabFaultLength = new wxStaticText(m_panelStability, wxID_ANY, _("Fault length"), wxDefaultPosition,
                                                   wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl4_8->Add(m_staticTextStabFaultLength, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_6 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_8->Add(boxSizerLvl5_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlStabFaultLength = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                               wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlStabFaultLength->SetHint(wxT(""));
#endif

    boxSizerLvl5_6->Add(m_textCtrlStabFaultLength, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextS_2 = new wxStaticText(m_panelStability, wxID_ANY, _("s"), wxDefaultPosition,
                                       wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_6->Add(m_staticTextS_2, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_9 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_3->Add(boxSizerLvl4_9, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextStabFaultResistance =
        new wxStaticText(m_panelStability, wxID_ANY, _("Fault resistance (R)"), wxDefaultPosition,
                         wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl4_9->Add(m_staticTextStabFaultResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_7 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_9->Add(boxSizerLvl5_7, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlStabFaultResistance = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                                   wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlStabFaultResistance->SetHint(wxT(""));
#endif

    boxSizerLvl5_7->Add(m_textCtrlStabFaultResistance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPU_3 = new wxStaticText(m_panelStability, wxID_ANY, _("p.u."), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_7->Add(m_staticTextPU_3, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_10 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_3->Add(boxSizerLvl4_10, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextStabFaultReactance =
        new wxStaticText(m_panelStability, wxID_ANY, _("Fault reactance (Xl)"), wxDefaultPosition,
                         wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl4_10->Add(m_staticTextStabFaultReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_8 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_10->Add(boxSizerLvl5_8, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlStabFaultReactance = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                                  wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlStabFaultReactance->SetHint(wxT(""));
#endif

    boxSizerLvl5_8->Add(m_textCtrlStabFaultReactance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPU_4 = new wxStaticText(m_panelStability, wxID_ANY, _("p.u."), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_8->Add(m_staticTextPU_4, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_panelPowerQuality =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelPowerQuality, _("Power Quality"), false);

    wxBoxSizer* boxSizerLvl2_4 = new wxBoxSizer(wxVERTICAL);
    m_panelPowerQuality->SetSizer(boxSizerLvl2_4);

    m_checkBoxPlotPQData = new wxCheckBox(m_panelPowerQuality, wxID_ANY, _("Plot harmonic bus impedance"),
                                          wxDefaultPosition, wxDLG_UNIT(m_panelPowerQuality, wxSize(-1, -1)), 0);
    m_checkBoxPlotPQData->SetValue(false);

    boxSizerLvl2_4->Add(m_checkBoxPlotPQData, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerOkCancel = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerOkCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerOkCancel->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_ButtonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerOkCancel->Add(m_ButtonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("BusFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxVERTICAL);
    } else {
        CentreOnScreen(wxVERTICAL);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_choiceNomVoltage->Connect(wxEVT_COMMAND_CHOICE_SELECTED,
                                wxCommandEventHandler(BusFormBase::OnNominalVoltageChoice), NULL, this);
    m_checkBoxCtrlVoltage->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                   wxCommandEventHandler(BusFormBase::OnControlledVoltageClick), NULL, this);
    m_checkBoxFault->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(BusFormBase::OnInsertFaultClick),
                             NULL, this);
    m_choiceFaultType->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(BusFormBase::OnFaultTypeChoice),
                               NULL, this);
    m_checkBoxStabFault->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                 wxCommandEventHandler(BusFormBase::OnInsertStabFaultClick), NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BusFormBase::OnButtonOKClick), NULL, this);
    m_ButtonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BusFormBase::OnButtonCancelClick), NULL,
                            this);
}

BusFormBase::~BusFormBase()
{
    m_choiceNomVoltage->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED,
                                   wxCommandEventHandler(BusFormBase::OnNominalVoltageChoice), NULL, this);
    m_checkBoxCtrlVoltage->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                      wxCommandEventHandler(BusFormBase::OnControlledVoltageClick), NULL, this);
    m_checkBoxFault->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(BusFormBase::OnInsertFaultClick),
                                NULL, this);
    m_choiceFaultType->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(BusFormBase::OnFaultTypeChoice),
                                  NULL, this);
    m_checkBoxStabFault->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                    wxCommandEventHandler(BusFormBase::OnInsertStabFaultClick), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BusFormBase::OnButtonOKClick), NULL,
                           this);
    m_ButtonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(BusFormBase::OnButtonCancelClick),
                               NULL, this);
}

SyncMachineFormBase::SyncMachineFormBase(wxWindow* parent,
                                         wxWindowID id,
                                         const wxString& title,
                                         const wxPoint& pos,
                                         const wxSize& size,
                                         long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextName = new wxStaticText(m_panelGeneral, wxID_ANY, _("Name"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextName, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlName = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                    wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlName->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlName, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlName->SetMinSize(wxSize(300, -1));

    wxGridSizer* gridSizerLvl3_1 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_1->Add(gridSizerLvl3_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_5 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextNominalPower = new wxStaticText(m_panelGeneral, wxID_ANY, _("Rated power"), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_5->Add(m_staticTextNominalPower, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_5 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_5->Add(boxSizerLvl5_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlnominalPower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                            wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlnominalPower->SetHint(wxT(""));
#endif

    boxSizerLvl5_5->Add(m_textCtrlnominalPower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceNominalPowerArr;
    m_choiceNominalPowerArr.Add(wxT("VA"));
    m_choiceNominalPowerArr.Add(wxT("kVA"));
    m_choiceNominalPowerArr.Add(wxT("MVA"));
    m_choiceNominalPower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceNominalPowerArr, 0);
    m_choiceNominalPower->SetSelection(2);

    boxSizerLvl5_5->Add(m_choiceNominalPower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    gridSizerLvl3_1->Add(0, 0, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_1 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextActivePower = new wxStaticText(m_panelGeneral, wxID_ANY, _("Active power"), wxDefaultPosition,
                                               wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_1->Add(m_staticTextActivePower, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_1->Add(boxSizerLvl5_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlActivePower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlActivePower->SetHint(wxT(""));
#endif

    boxSizerLvl5_1->Add(m_textCtrlActivePower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceActivePowerArr;
    m_choiceActivePowerArr.Add(wxT("p.u."));
    m_choiceActivePowerArr.Add(wxT("W"));
    m_choiceActivePowerArr.Add(wxT("kW"));
    m_choiceActivePowerArr.Add(wxT("MW"));
    m_choiceActivePower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceActivePowerArr, 0);
    m_choiceActivePower->SetSelection(3);

    boxSizerLvl5_1->Add(m_choiceActivePower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_2 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextReactivePower = new wxStaticText(m_panelGeneral, wxID_ANY, _("Reactive power"), wxDefaultPosition,
                                                 wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_2->Add(m_staticTextReactivePower, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_2->Add(boxSizerLvl5_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlReactivePower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlReactivePower->SetHint(wxT(""));
#endif

    boxSizerLvl5_2->Add(m_textCtrlReactivePower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceReactivePowerArr;
    m_choiceReactivePowerArr.Add(wxT("p.u."));
    m_choiceReactivePowerArr.Add(wxT("VAr"));
    m_choiceReactivePowerArr.Add(wxT("kVAr"));
    m_choiceReactivePowerArr.Add(wxT("MVAr"));
    m_choiceReactivePower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceReactivePowerArr, 0);
    m_choiceReactivePower->SetSelection(3);

    boxSizerLvl5_2->Add(m_choiceReactivePower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_3 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxMaxReactive = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Max reactive power"), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    m_checkBoxMaxReactive->SetValue(false);

    boxSizerLvl4_3->Add(m_checkBoxMaxReactive, 0, wxALL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_3 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_3->Add(boxSizerLvl5_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlMaxRectivePower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                               wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlMaxRectivePower->SetHint(wxT(""));
#endif

    boxSizerLvl5_3->Add(m_textCtrlMaxRectivePower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceMaxRectivePowerArr;
    m_choiceMaxRectivePowerArr.Add(wxT("p.u."));
    m_choiceMaxRectivePowerArr.Add(wxT("VAr"));
    m_choiceMaxRectivePowerArr.Add(wxT("kVAr"));
    m_choiceMaxRectivePowerArr.Add(wxT("MVAr"));
    m_choiceMaxRectivePower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceMaxRectivePowerArr, 0);
    m_choiceMaxRectivePower->SetSelection(3);

    boxSizerLvl5_3->Add(m_choiceMaxRectivePower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_4 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxMinReactive = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Min reactive power"), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    m_checkBoxMinReactive->SetValue(false);

    boxSizerLvl4_4->Add(m_checkBoxMinReactive, 0, wxALL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_4 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_4->Add(boxSizerLvl5_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlMinRectivePower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                               wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlMinRectivePower->SetHint(wxT(""));
#endif

    boxSizerLvl5_4->Add(m_textCtrlMinRectivePower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceMinRectivePowerArr;
    m_choiceMinRectivePowerArr.Add(wxT("p.u."));
    m_choiceMinRectivePowerArr.Add(wxT("VAr"));
    m_choiceMinRectivePowerArr.Add(wxT("kVAr"));
    m_choiceMinRectivePowerArr.Add(wxT("MVAr"));
    m_choiceMinRectivePower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceMinRectivePowerArr, 0);
    m_choiceMinRectivePower->SetSelection(3);

    boxSizerLvl5_4->Add(m_choiceMinRectivePower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    m_checkBoxUseMachinePower = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Use machine rated power as base"),
                                               wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    m_checkBoxUseMachinePower->SetValue(false);

    boxSizerLvl2_1->Add(m_checkBoxUseMachinePower, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_panelFault =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelFault, _("Fault"), false);

    wxBoxSizer* boxSizerLvl2_2 = new wxBoxSizer(wxVERTICAL);
    m_panelFault->SetSizer(boxSizerLvl2_2);

    wxStaticBoxSizer* staticBoxSizerLvl3_1 =
        new wxStaticBoxSizer(new wxStaticBox(m_panelFault, wxID_ANY, _("Sequence impedances (p.u.)")), wxVERTICAL);

    boxSizerLvl2_2->Add(staticBoxSizerLvl3_1, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl4_2 = new wxGridSizer(0, 2, 0, 0);

    staticBoxSizerLvl3_1->Add(gridSizerLvl4_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_6 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_2->Add(boxSizerLvl5_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextPosResistance = new wxStaticText(m_panelFault, wxID_ANY, _("Positive resistance (R1)"),
                                                 wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl5_6->Add(m_staticTextPosResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_textCtrlPosResistance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlPosResistance->SetHint(wxT(""));
#endif

    boxSizerLvl5_6->Add(m_textCtrlPosResistance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_7 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_2->Add(boxSizerLvl5_7, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextPosReactance = new wxStaticText(m_panelFault, wxID_ANY, _("Positive reactance (X1)"), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl5_7->Add(m_staticTextPosReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_textCtrlPosReactance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlPosReactance->SetHint(wxT(""));
#endif

    boxSizerLvl5_7->Add(m_textCtrlPosReactance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_8 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_2->Add(boxSizerLvl5_8, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextNegResistance = new wxStaticText(m_panelFault, wxID_ANY, _("Negative resistance (R2)"),
                                                 wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl5_8->Add(m_staticTextNegResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_textCtrlNegResistance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlNegResistance->SetHint(wxT(""));
#endif

    boxSizerLvl5_8->Add(m_textCtrlNegResistance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_9 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_2->Add(boxSizerLvl5_9, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextNegReactance = new wxStaticText(m_panelFault, wxID_ANY, _("Negative reactance (X2)"), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl5_9->Add(m_staticTextNegReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_textCtrlNegReactance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlNegReactance->SetHint(wxT(""));
#endif

    boxSizerLvl5_9->Add(m_textCtrlNegReactance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_10 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_2->Add(boxSizerLvl5_10, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextZeroResistance = new wxStaticText(m_panelFault, wxID_ANY, _("Zero resistance (R0)"), wxDefaultPosition,
                                                  wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl5_10->Add(m_staticTextZeroResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    m_textCtrlZeroResistance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlZeroResistance->SetHint(wxT(""));
#endif

    boxSizerLvl5_10->Add(m_textCtrlZeroResistance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_11 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_2->Add(boxSizerLvl5_11, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextZeroReactance = new wxStaticText(m_panelFault, wxID_ANY, _("Zero reactance (X0)"), wxDefaultPosition,
                                                 wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl5_11->Add(m_staticTextZeroReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    m_textCtrlZeroReactance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlZeroReactance->SetHint(wxT(""));
#endif

    boxSizerLvl5_11->Add(m_textCtrlZeroReactance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl3_3 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_2->Add(gridSizerLvl3_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_12 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_3->Add(boxSizerLvl4_12, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextGrdResistance = new wxStaticText(m_panelFault, wxID_ANY, _("Ground resistance (p.u.)"),
                                                 wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_12->Add(m_staticTextGrdResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    m_textCtrlGrdResistance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlGrdResistance->SetHint(wxT(""));
#endif

    boxSizerLvl4_12->Add(m_textCtrlGrdResistance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_13 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_3->Add(boxSizerLvl4_13, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextGrdReactance = new wxStaticText(m_panelFault, wxID_ANY, _("Ground reactance (p.u.)"), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_13->Add(m_staticTextGrdReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    m_textCtrlGrdReactance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlGrdReactance->SetHint(wxT(""));
#endif

    boxSizerLvl4_13->Add(m_textCtrlGrdReactance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    m_checkBoxGroundNeutral = new wxCheckBox(m_panelFault, wxID_ANY, _("Grounded neutral"), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
    m_checkBoxGroundNeutral->SetValue(true);

    boxSizerLvl2_2->Add(m_checkBoxGroundNeutral, 0, wxALL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonStab = new wxButton(this, wxID_ANY, _("Stability"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonStab, 0, wxALL | wxALIGN_LEFT, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_ButtonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_ButtonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("SyncMachineFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_checkBoxMaxReactive->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                   wxCommandEventHandler(SyncMachineFormBase::OnCheckMaxReactive), NULL, this);
    m_checkBoxMinReactive->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                   wxCommandEventHandler(SyncMachineFormBase::OnCheckMinReactive), NULL, this);
    m_buttonStab->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                          wxCommandEventHandler(SyncMachineFormBase::OnStabilityButtonClick), NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SyncMachineFormBase::OnOKButtonClick), NULL,
                        this);
    m_ButtonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                            wxCommandEventHandler(SyncMachineFormBase::OnCancelButtonClick), NULL, this);
}

SyncMachineFormBase::~SyncMachineFormBase()
{
    m_checkBoxMaxReactive->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                      wxCommandEventHandler(SyncMachineFormBase::OnCheckMaxReactive), NULL, this);
    m_checkBoxMinReactive->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                      wxCommandEventHandler(SyncMachineFormBase::OnCheckMinReactive), NULL, this);
    m_buttonStab->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                             wxCommandEventHandler(SyncMachineFormBase::OnStabilityButtonClick), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SyncMachineFormBase::OnOKButtonClick),
                           NULL, this);
    m_ButtonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(SyncMachineFormBase::OnCancelButtonClick), NULL, this);
}

GeneratorStabFormBase::GeneratorStabFormBase(wxWindow* parent,
                                             wxWindowID id,
                                             const wxString& title,
                                             const wxPoint& pos,
                                             const wxSize& size,
                                             long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl1_1->Add(boxSizerLvl2_1, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxPlotSyncMachine = new wxCheckBox(this, wxID_ANY, _("Plot synchronous machine data"), wxDefaultPosition,
                                               wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxPlotSyncMachine->SetValue(false);

    boxSizerLvl2_1->Add(m_checkBoxPlotSyncMachine, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl3_1 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_1->Add(gridSizerLvl3_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_1 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextInertia =
        new wxStaticText(this, wxID_ANY, _("Inertia (H)"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl4_1->Add(m_staticTextInertia, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_1->Add(boxSizerLvl5_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlInertia = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlInertia->SetHint(wxT(""));
#endif

    boxSizerLvl5_1->Add(m_textCtrlInertia, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextS_1 = new wxStaticText(this, wxID_ANY, _("s"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_1->Add(m_staticTextS_1, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_2 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextDamping =
        new wxStaticText(this, wxID_ANY, _("Damping factor"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl4_2->Add(m_staticTextDamping, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_2->Add(boxSizerLvl5_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlDamping = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlDamping->SetHint(wxT(""));
#endif

    boxSizerLvl5_2->Add(m_textCtrlDamping, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextPU_1 =
        new wxStaticText(this, wxID_ANY, _("p.u."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_2->Add(m_staticTextPU_1, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_3 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxUseAVR =
        new wxCheckBox(this, wxID_ANY, _("Use AVR"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxUseAVR->SetValue(false);

    boxSizerLvl4_3->Add(m_checkBoxUseAVR, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_buttonEditAVR =
        new wxButton(this, wxID_ANY, _("Edit AVR"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl4_3->Add(m_buttonEditAVR, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_4 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxUseSG =
        new wxCheckBox(this, wxID_ANY, _("Use speed governor"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_checkBoxUseSG->SetValue(false);

    boxSizerLvl4_4->Add(m_checkBoxUseSG, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_buttonEditSG =
        new wxButton(this, wxID_ANY, _("Edit speed governor"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl4_4->Add(m_buttonEditSG, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticLine_1 =
        new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLI_HORIZONTAL);

    boxSizerLvl2_1->Add(m_staticLine_1, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl3_2 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_1->Add(gridSizerLvl3_2, 1, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_5 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextRa = new wxStaticText(this, wxID_ANY, _("Armature resistance (Ra)"), wxDefaultPosition,
                                      wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl4_5->Add(m_staticTextRa, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_3 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_5->Add(boxSizerLvl5_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlRa = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlRa->SetHint(wxT(""));
#endif

    boxSizerLvl5_3->Add(m_textCtrlRa, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextPU_2 =
        new wxStaticText(this, wxID_ANY, _("p.u."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_3->Add(m_staticTextPU_2, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_6 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextXp = new wxStaticText(this, wxID_ANY, _("Potier reactance (Xp)"), wxDefaultPosition,
                                      wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl4_6->Add(m_staticTextXp, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_14 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_6->Add(boxSizerLvl5_14, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlXp = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlXp->SetHint(wxT(""));
#endif

    boxSizerLvl5_14->Add(m_textCtrlXp, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextPU_9 =
        new wxStaticText(this, wxID_ANY, _("p.u."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_14->Add(m_staticTextPU_9, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_7 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_7, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextSat = new wxStaticText(this, wxID_ANY, _("Saturation factor"), wxDefaultPosition,
                                       wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl4_7->Add(m_staticTextSat, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_15 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_7->Add(boxSizerLvl5_15, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlSat = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlSat->SetHint(wxT(""));
#endif

    boxSizerLvl5_15->Add(m_textCtrlSat, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextPU_10 =
        new wxStaticText(this, wxID_ANY, _("p.u."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_15->Add(m_staticTextPU_10, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_8 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_8, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextOCFreq = new wxStaticText(this, wxID_ANY, _("Open-circuit Frequency"), wxDefaultPosition,
                                          wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl4_8->Add(m_staticTextOCFreq, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_16 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_8->Add(boxSizerLvl5_16, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlOCFreq = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlOCFreq->SetHint(wxT(""));
#endif

    boxSizerLvl5_16->Add(m_textCtrlOCFreq, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextHz_1 =
        new wxStaticText(this, wxID_ANY, _("Hz"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_16->Add(m_staticTextHz_1, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizerSyncronous =
        new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Syncronous")), wxVERTICAL);

    boxSizerLvl2_1->Add(staticBoxSizerSyncronous, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl4_3 = new wxGridSizer(0, 2, 0, 0);

    staticBoxSizerSyncronous->Add(gridSizerLvl4_3, 1, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_4 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_3->Add(boxSizerLvl5_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextSyncXd = new wxStaticText(this, wxID_ANY, _("Direct-axis reactance (Xd)"), wxDefaultPosition,
                                          wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_4->Add(m_staticTextSyncXd, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_4->Add(boxSizerLvl6_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlSyncXd = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlSyncXd->SetHint(wxT(""));
#endif

    boxSizerLvl6_1->Add(m_textCtrlSyncXd, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextPU_3 =
        new wxStaticText(this, wxID_ANY, _("p.u."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl6_1->Add(m_staticTextPU_3, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_5 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_3->Add(boxSizerLvl5_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextSyncXq = new wxStaticText(this, wxID_ANY, _("Quadrature-axis reactance (Xq)"), wxDefaultPosition,
                                          wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_5->Add(m_staticTextSyncXq, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_5->Add(boxSizerLvl6_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlSyncXq = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlSyncXq->SetHint(wxT(""));
#endif

    boxSizerLvl6_2->Add(m_textCtrlSyncXq, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextPU_4 =
        new wxStaticText(this, wxID_ANY, _("p.u."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl6_2->Add(m_staticTextPU_4, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizerTransient =
        new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Transient")), wxVERTICAL);

    boxSizerLvl2_1->Add(staticBoxSizerTransient, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl4_4 = new wxGridSizer(0, 2, 0, 0);

    staticBoxSizerTransient->Add(gridSizerLvl4_4, 1, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_6 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_4->Add(boxSizerLvl5_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextTranXd = new wxStaticText(this, wxID_ANY, _("Direct-axis reactance (X'd)"), wxDefaultPosition,
                                          wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_6->Add(m_staticTextTranXd, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_3 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_6->Add(boxSizerLvl6_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlTranXd = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlTranXd->SetHint(wxT(""));
#endif

    boxSizerLvl6_3->Add(m_textCtrlTranXd, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextPU_5 =
        new wxStaticText(this, wxID_ANY, _("p.u."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl6_3->Add(m_staticTextPU_5, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_7 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_4->Add(boxSizerLvl5_7, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextTranXq = new wxStaticText(this, wxID_ANY, _("Quadrature-axis reactance (X'q)"), wxDefaultPosition,
                                          wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_7->Add(m_staticTextTranXq, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_4 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_7->Add(boxSizerLvl6_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlTranXq = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlTranXq->SetHint(wxT(""));
#endif

    boxSizerLvl6_4->Add(m_textCtrlTranXq, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextPU_6 =
        new wxStaticText(this, wxID_ANY, _("p.u."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl6_4->Add(m_staticTextPU_6, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_8 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_4->Add(boxSizerLvl5_8, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextTranTd0 = new wxStaticText(this, wxID_ANY, _("Direct-axis time constant (T'd0)"), wxDefaultPosition,
                                           wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_8->Add(m_staticTextTranTd0, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_5 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_8->Add(boxSizerLvl6_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlTranTd0 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlTranTd0->SetHint(wxT(""));
#endif

    boxSizerLvl6_5->Add(m_textCtrlTranTd0, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextS_2 = new wxStaticText(this, wxID_ANY, _("s"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl6_5->Add(m_staticTextS_2, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_9 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_4->Add(boxSizerLvl5_9, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextTranTq0 = new wxStaticText(this, wxID_ANY, _("Quadrature-axis time constant (T'q0)"), wxDefaultPosition,
                                           wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_9->Add(m_staticTextTranTq0, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_6 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_9->Add(boxSizerLvl6_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlTranTq0 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlTranTq0->SetHint(wxT(""));
#endif

    boxSizerLvl6_6->Add(m_textCtrlTranTq0, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextS_3 = new wxStaticText(this, wxID_ANY, _("s"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl6_6->Add(m_staticTextS_3, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizerSubtransient =
        new wxStaticBoxSizer(new wxStaticBox(this, wxID_ANY, _("Sub-transient")), wxVERTICAL);

    boxSizerLvl2_1->Add(staticBoxSizerSubtransient, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl4_5 = new wxGridSizer(0, 2, 0, 0);

    staticBoxSizerSubtransient->Add(gridSizerLvl4_5, 1, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_10 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_5->Add(boxSizerLvl5_10, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextSubXd = new wxStaticText(this, wxID_ANY, _("Direct-axis reactance (X''d)"), wxDefaultPosition,
                                         wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_10->Add(m_staticTextSubXd, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_7 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_10->Add(boxSizerLvl6_7, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlSubXd = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlSubXd->SetHint(wxT(""));
#endif

    boxSizerLvl6_7->Add(m_textCtrlSubXd, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextPU_7 =
        new wxStaticText(this, wxID_ANY, _("p.u."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl6_7->Add(m_staticTextPU_7, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_11 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_5->Add(boxSizerLvl5_11, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextSubXq = new wxStaticText(this, wxID_ANY, _("Quadrature-axis reactance (X''q)"), wxDefaultPosition,
                                         wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_11->Add(m_staticTextSubXq, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_8 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_11->Add(boxSizerLvl6_8, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlSubXq = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlSubXq->SetHint(wxT(""));
#endif

    boxSizerLvl6_8->Add(m_textCtrlSubXq, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextPU_8 =
        new wxStaticText(this, wxID_ANY, _("p.u."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl6_8->Add(m_staticTextPU_8, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_12 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_5->Add(boxSizerLvl5_12, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextSubTd0 = new wxStaticText(this, wxID_ANY, _("Direct-axis time constant (T''d0)"), wxDefaultPosition,
                                          wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_12->Add(m_staticTextSubTd0, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_9 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_12->Add(boxSizerLvl6_9, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlSubTd0 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlSubTd0->SetHint(wxT(""));
#endif

    boxSizerLvl6_9->Add(m_textCtrlSubTd0, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextS_4 = new wxStaticText(this, wxID_ANY, _("s"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl6_9->Add(m_staticTextS_4, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_13 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl4_5->Add(boxSizerLvl5_13, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextSubTq0 = new wxStaticText(this, wxID_ANY, _("Quadrature-axis time constant (T''q0)"), wxDefaultPosition,
                                          wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl5_13->Add(m_staticTextSubTq0, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_10 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_13->Add(boxSizerLvl6_10, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlSubTq0 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlSubTq0->SetHint(wxT(""));
#endif

    boxSizerLvl6_10->Add(m_textCtrlSubTq0, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextS_5 = new wxStaticText(this, wxID_ANY, _("s"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl6_10->Add(m_staticTextS_5, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerVDivider = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_1->Add(boxSizerVDivider, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerSection_2 = new wxBoxSizer(wxVERTICAL);

    boxSizerVDivider->Add(boxSizerSection_2, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerSection_1 = new wxBoxSizer(wxVERTICAL);

    boxSizerVDivider->Add(boxSizerSection_1, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonSwitching =
        new wxButton(this, wxID_ANY, _("Switching"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonSwitching, 0, wxALL | wxALIGN_LEFT, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_ButtonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_ButtonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    SetName(wxT("GeneratorStabFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_checkBoxUseAVR->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(GeneratorStabFormBase::UseAVRClick),
                              NULL, this);
    m_buttonEditAVR->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                             wxCommandEventHandler(GeneratorStabFormBase::OnEditAVRButtonClick), NULL, this);
    m_checkBoxUseSG->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(GeneratorStabFormBase::UseSGClick),
                             NULL, this);
    m_buttonEditSG->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                            wxCommandEventHandler(GeneratorStabFormBase::OnSpeedGovernorButtonClick), NULL, this);
    m_buttonSwitching->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(GeneratorStabFormBase::OnSwitchingButtonClick), NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GeneratorStabFormBase::OnOKButtonClick),
                        NULL, this);
    m_ButtonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                            wxCommandEventHandler(GeneratorStabFormBase::OnCancelButtonClick), NULL, this);
}

GeneratorStabFormBase::~GeneratorStabFormBase()
{
    m_checkBoxUseAVR->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                 wxCommandEventHandler(GeneratorStabFormBase::UseAVRClick), NULL, this);
    m_buttonEditAVR->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                                wxCommandEventHandler(GeneratorStabFormBase::OnEditAVRButtonClick), NULL, this);
    m_checkBoxUseSG->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                wxCommandEventHandler(GeneratorStabFormBase::UseSGClick), NULL, this);
    m_buttonEditSG->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(GeneratorStabFormBase::OnSpeedGovernorButtonClick), NULL, this);
    m_buttonSwitching->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                                  wxCommandEventHandler(GeneratorStabFormBase::OnSwitchingButtonClick), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GeneratorStabFormBase::OnOKButtonClick),
                           NULL, this);
    m_ButtonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(GeneratorStabFormBase::OnCancelButtonClick), NULL, this);
}

LineFormBase::LineFormBase(wxWindow* parent,
                           wxWindowID id,
                           const wxString& title,
                           const wxPoint& pos,
                           const wxSize& size,
                           long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextName = new wxStaticText(m_panelGeneral, wxID_ANY, _("Name"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextName, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlName = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                    wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlName->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlName, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlName->SetMinSize(wxSize(300, -1));

    wxGridSizer* gridSizerLvl3_1 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_1->Add(gridSizerLvl3_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_9 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_9, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextNominalVoltage = new wxStaticText(m_panelGeneral, wxID_ANY, _("Rated voltage"), wxDefaultPosition,
                                                  wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_9->Add(m_staticTextNominalVoltage, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextNominalVoltageValue = new wxStaticText(m_panelGeneral, wxID_ANY, _("138 kV"), wxDefaultPosition,
                                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    wxFont m_staticTextNominalVoltageValueFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticTextNominalVoltageValueFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticTextNominalVoltageValue->SetFont(m_staticTextNominalVoltageValueFont);

    boxSizerLvl4_9->Add(m_staticTextNominalVoltageValue, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_8 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_8, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextNominalPower = new wxStaticText(m_panelGeneral, wxID_ANY, _("Rated power"), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_8->Add(m_staticTextNominalPower, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_5 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_8->Add(boxSizerLvl5_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlNominalPower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                            wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlNominalPower->SetHint(wxT(""));
#endif

    boxSizerLvl5_5->Add(m_textCtrlNominalPower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceNominalPowerArr;
    m_choiceNominalPowerArr.Add(wxT("VA"));
    m_choiceNominalPowerArr.Add(wxT("kVA"));
    m_choiceNominalPowerArr.Add(wxT("MVA"));
    m_choiceNominalPower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceNominalPowerArr, 0);
    m_choiceNominalPower->SetSelection(2);

    boxSizerLvl5_5->Add(m_choiceNominalPower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_1 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextResistance = new wxStaticText(m_panelGeneral, wxID_ANY, _("Resistance (R)"), wxDefaultPosition,
                                              wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_1->Add(m_staticTextResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_1->Add(boxSizerLvl5_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlResistance = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlResistance->SetHint(wxT(""));
#endif

    boxSizerLvl5_1->Add(m_textCtrlResistance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceResistanceArr;
    m_choiceResistanceArr.Add(wxT("p.u."));
    m_choiceResistanceArr.Add(wxT("Ohm"));
    m_choiceResistanceArr.Add(wxT("Ohm/km"));
    m_choiceResistance = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                      wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceResistanceArr, 0);
    m_choiceResistance->SetSelection(0);

    boxSizerLvl5_1->Add(m_choiceResistance, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_2 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextReactance = new wxStaticText(m_panelGeneral, wxID_ANY, _("Indutive reactance (XL)"), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_2->Add(m_staticTextReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_2->Add(boxSizerLvl5_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlReactance = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlReactance->SetHint(wxT(""));
#endif

    boxSizerLvl5_2->Add(m_textCtrlReactance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceReactanceArr;
    m_choiceReactanceArr.Add(wxT("p.u."));
    m_choiceReactanceArr.Add(wxT("Ohm"));
    m_choiceReactanceArr.Add(wxT("Ohm/km"));
    m_choiceReactance = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                     wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceReactanceArr, 0);
    m_choiceReactance->SetSelection(0);

    boxSizerLvl5_2->Add(m_choiceReactance, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_3 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextSusceptance = new wxStaticText(m_panelGeneral, wxID_ANY, _("Capacitive susceptance (B)"),
                                               wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_3->Add(m_staticTextSusceptance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_3 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_3->Add(boxSizerLvl5_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlSusceptance = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlSusceptance->SetHint(wxT(""));
#endif

    boxSizerLvl5_3->Add(m_textCtrlSusceptance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceSusceptanceArr;
    m_choiceSusceptanceArr.Add(wxT("p.u."));
    m_choiceSusceptanceArr.Add(wxT("S"));
    m_choiceSusceptanceArr.Add(wxT("S/km"));
    m_choiceSusceptance = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceSusceptanceArr, 0);
    m_choiceSusceptance->SetSelection(0);

    boxSizerLvl5_3->Add(m_choiceSusceptance, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_4 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextLineSize = new wxStaticText(m_panelGeneral, wxID_ANY, _("Line size"), wxDefaultPosition,
                                            wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_4->Add(m_staticTextLineSize, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_4 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_4->Add(boxSizerLvl5_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlLineSize = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlLineSize->SetHint(wxT(""));
#endif

    boxSizerLvl5_4->Add(m_textCtrlLineSize, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextKM = new wxStaticText(m_panelGeneral, wxID_ANY, _("km"), wxDefaultPosition,
                                      wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl5_4->Add(m_staticTextKM, 0, wxALL, WXC_FROM_DIP(5));

    m_checkUseLinePower = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Use line rated power as base"), wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    m_checkUseLinePower->SetValue(false);

    boxSizerLvl2_1->Add(m_checkUseLinePower, 0, wxALL, WXC_FROM_DIP(5));

    m_panelFault =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelFault, _("Fault"), false);

    wxBoxSizer* boxSizerLvl2_2 = new wxBoxSizer(wxVERTICAL);
    m_panelFault->SetSizer(boxSizerLvl2_2);

    wxStaticBoxSizer* staticBoxSizerZeroImpSeq =
        new wxStaticBoxSizer(new wxStaticBox(m_panelFault, wxID_ANY, _("Zero-sequence impedances (p.u.)")), wxVERTICAL);

    boxSizerLvl2_2->Add(staticBoxSizerZeroImpSeq, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl3_2 = new wxGridSizer(0, 2, 0, 0);

    staticBoxSizerZeroImpSeq->Add(gridSizerLvl3_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_5 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextZeroResistance = new wxStaticText(m_panelFault, wxID_ANY, _("Resistance (R0)"), wxDefaultPosition,
                                                  wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_5->Add(m_staticTextZeroResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_textCtrlZeroResistance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlZeroResistance->SetHint(wxT(""));
#endif

    boxSizerLvl4_5->Add(m_textCtrlZeroResistance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_6 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextZeroReactance = new wxStaticText(m_panelFault, wxID_ANY, _("Indutive reactance (X0)"),
                                                 wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_6->Add(m_staticTextZeroReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_textCtrlZeroReactance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlZeroReactance->SetHint(wxT(""));
#endif

    boxSizerLvl4_6->Add(m_textCtrlZeroReactance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_7 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_7, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextZeroSusceptance = new wxStaticText(m_panelFault, wxID_ANY, _("Capacitive susceptance (B0)"),
                                                   wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_7->Add(m_staticTextZeroSusceptance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_textCtrlZeroSusceptance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlZeroSusceptance->SetHint(wxT(""));
#endif

    boxSizerLvl4_7->Add(m_textCtrlZeroSusceptance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonStability =
        new wxButton(this, wxID_ANY, _("Stability"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonStability, 0, wxALL | wxALIGN_LEFT, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("LineFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonStability->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(LineFormBase::OnStabilityButtonClick), NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LineFormBase::OnOKButtonClick), NULL, this);
    m_buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LineFormBase::OnCancelButtonClick),
                            NULL, this);
}

LineFormBase::~LineFormBase()
{
    m_buttonStability->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                                  wxCommandEventHandler(LineFormBase::OnStabilityButtonClick), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LineFormBase::OnOKButtonClick), NULL,
                           this);
    m_buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LineFormBase::OnCancelButtonClick),
                               NULL, this);
}

TransformerFormBase::TransformerFormBase(wxWindow* parent,
                                         wxWindowID id,
                                         const wxString& title,
                                         const wxPoint& pos,
                                         const wxSize& size,
                                         long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextName = new wxStaticText(m_panelGeneral, wxID_ANY, _("Name"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextName, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlName = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                    wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlName->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlName, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlName->SetMinSize(wxSize(300, -1));

    wxGridSizer* gridSizerLvl3_1 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_1->Add(gridSizerLvl3_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_1 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextNominalVoltage = new wxStaticText(m_panelGeneral, wxID_ANY, _("Rated voltage"), wxDefaultPosition,
                                                  wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_1->Add(m_staticTextNominalVoltage, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextNominalVoltageValue =
        new wxStaticText(m_panelGeneral, wxID_ANY, _("138 kV / 138 kV"), wxDefaultPosition,
                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    wxFont m_staticTextNominalVoltageValueFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticTextNominalVoltageValueFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticTextNominalVoltageValue->SetFont(m_staticTextNominalVoltageValueFont);

    boxSizerLvl4_1->Add(m_staticTextNominalVoltageValue, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_5 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextBaseVoltage = new wxStaticText(m_panelGeneral, wxID_ANY, _("Base voltage"), wxDefaultPosition,
                                               wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_5->Add(m_staticTextBaseVoltage, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceBaseVoltageArr;
    m_choiceBaseVoltageArr.Add(wxT("138 kV"));
    m_choiceBaseVoltageArr.Add(wxT("138 kV"));
    m_choiceBaseVoltage = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceBaseVoltageArr, 0);
    m_choiceBaseVoltage->SetSelection(0);

    boxSizerLvl4_5->Add(m_choiceBaseVoltage, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_2 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextNominalPower = new wxStaticText(m_panelGeneral, wxID_ANY, _("Rated power"), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_2->Add(m_staticTextNominalPower, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_2->Add(boxSizerLvl5_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlNominalPower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                            wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlNominalPower->SetHint(wxT(""));
#endif

    boxSizerLvl5_1->Add(m_textCtrlNominalPower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceNominalPowerArr;
    m_choiceNominalPowerArr.Add(wxT("VA"));
    m_choiceNominalPowerArr.Add(wxT("kVA"));
    m_choiceNominalPowerArr.Add(wxT("MVA"));
    m_choiceNominalPower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceNominalPowerArr, 0);
    m_choiceNominalPower->SetSelection(2);

    boxSizerLvl5_1->Add(m_choiceNominalPower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    gridSizerLvl3_1->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_3 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextResistance = new wxStaticText(m_panelGeneral, wxID_ANY, _("Resistance (R)"), wxDefaultPosition,
                                              wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_3->Add(m_staticTextResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_3->Add(boxSizerLvl5_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlResistance = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlResistance->SetHint(wxT(""));
#endif

    boxSizerLvl5_2->Add(m_textCtrlResistance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceResistanceArr;
    m_choiceResistanceArr.Add(wxT("p.u."));
    m_choiceResistanceArr.Add(wxT("Ohm"));
    m_choiceResistance = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                      wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceResistanceArr, 0);
    m_choiceResistance->SetSelection(0);

    boxSizerLvl5_2->Add(m_choiceResistance, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_4 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextReactance = new wxStaticText(m_panelGeneral, wxID_ANY, _("Indutive reactance (XL)"), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_4->Add(m_staticTextReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_3 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_4->Add(boxSizerLvl5_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlReactance = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlReactance->SetHint(wxT(""));
#endif

    boxSizerLvl5_3->Add(m_textCtrlReactance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceReactanceArr;
    m_choiceReactanceArr.Add(wxT("p.u."));
    m_choiceReactanceArr.Add(wxT("Ohm"));
    m_choiceReactance = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                     wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceReactanceArr, 0);
    m_choiceReactance->SetSelection(0);

    boxSizerLvl5_3->Add(m_choiceReactance, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    m_staticLine_1 = new wxStaticLine(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                      wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), wxLI_HORIZONTAL);

    boxSizerLvl2_1->Add(m_staticLine_1, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl3_1 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_1->Add(boxSizerLvl3_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextConnection = new wxStaticText(m_panelGeneral, wxID_ANY, _("Connection"), wxDefaultPosition,
                                              wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl3_1->Add(m_staticTextConnection, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceConnectionArr;
    m_choiceConnectionArr.Add(wxT("Grounded Wye - Grounded Wye"));
    m_choiceConnectionArr.Add(wxT("Wye - Grounded Wye"));
    m_choiceConnectionArr.Add(wxT("Grounded Wye - Wye"));
    m_choiceConnectionArr.Add(wxT("Wye - Wye"));
    m_choiceConnectionArr.Add(wxT("Delta - Grounded Wye"));
    m_choiceConnectionArr.Add(wxT("Delta - Wye"));
    m_choiceConnectionArr.Add(wxT("Grounded Wye - Delta"));
    m_choiceConnectionArr.Add(wxT("Wye - Delta"));
    m_choiceConnectionArr.Add(wxT("Delta - Delta"));
    m_choiceConnection = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                      wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceConnectionArr, 0);
    m_choiceConnection->SetSelection(0);

    boxSizerLvl3_1->Add(m_choiceConnection, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl3_2 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_1->Add(gridSizerLvl3_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_6 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextTurnsRatio = new wxStaticText(m_panelGeneral, wxID_ANY, _("Turns ratio"), wxDefaultPosition,
                                              wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_6->Add(m_staticTextTurnsRatio, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlTurnRatio = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlTurnRatio->SetHint(wxT(""));
#endif

    boxSizerLvl4_6->Add(m_textCtrlTurnRatio, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_7 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_7, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextPhaseShift = new wxStaticText(m_panelGeneral, wxID_ANY, _("Phase shift"), wxDefaultPosition,
                                              wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_7->Add(m_staticTextPhaseShift, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_4 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_7->Add(boxSizerLvl5_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlPhaseShift = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlPhaseShift->SetHint(wxT(""));
#endif

    boxSizerLvl5_4->Add(m_textCtrlPhaseShift, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextDeg = new wxStaticText(m_panelGeneral, wxID_ANY, _("degrees"), wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl5_4->Add(m_staticTextDeg, 0, wxALL, WXC_FROM_DIP(5));

    m_checkUseTransformerPower = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Use transformer rated power as base"),
                                                wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    m_checkUseTransformerPower->SetValue(false);

    boxSizerLvl2_1->Add(m_checkUseTransformerPower, 0, wxALL, WXC_FROM_DIP(5));

    m_panelFault =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelFault, _("Fault"), false);

    wxBoxSizer* boxSizerLvl2_2 = new wxBoxSizer(wxVERTICAL);
    m_panelFault->SetSizer(boxSizerLvl2_2);

    wxStaticBoxSizer* staticBoxSizerZeroImpSeq =
        new wxStaticBoxSizer(new wxStaticBox(m_panelFault, wxID_ANY, _("Zero-sequence impedances (p.u.)")), wxVERTICAL);

    boxSizerLvl2_2->Add(staticBoxSizerZeroImpSeq, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl3_3 = new wxGridSizer(0, 2, 0, 0);

    staticBoxSizerZeroImpSeq->Add(gridSizerLvl3_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_8 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_3->Add(boxSizerLvl4_8, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextZeroResistance = new wxStaticText(m_panelFault, wxID_ANY, _("Resistance (R0)"), wxDefaultPosition,
                                                  wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_8->Add(m_staticTextZeroResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_textCtrlZeroResistance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlZeroResistance->SetHint(wxT(""));
#endif

    boxSizerLvl4_8->Add(m_textCtrlZeroResistance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_9 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_3->Add(boxSizerLvl4_9, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextZeroReactance = new wxStaticText(m_panelFault, wxID_ANY, _("Indutive reactance (X0)"),
                                                 wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_9->Add(m_staticTextZeroReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_textCtrlZeroReactance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlZeroReactance->SetHint(wxT(""));
#endif

    boxSizerLvl4_9->Add(m_textCtrlZeroReactance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizerGroundImpedances =
        new wxStaticBoxSizer(new wxStaticBox(m_panelFault, wxID_ANY, _("Ground impedances (p.u.)")), wxVERTICAL);

    boxSizerLvl2_2->Add(staticBoxSizerGroundImpedances, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl3_4 = new wxGridSizer(0, 2, 0, 0);

    staticBoxSizerGroundImpedances->Add(gridSizerLvl3_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_10 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_4->Add(boxSizerLvl4_10, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextPrimResistance = new wxStaticText(m_panelFault, wxID_ANY, _("Primary resistance"), wxDefaultPosition,
                                                  wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_10->Add(m_staticTextPrimResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    m_textCtrlPrimResistance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlPrimResistance->SetHint(wxT(""));
#endif

    boxSizerLvl4_10->Add(m_textCtrlPrimResistance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_11 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_4->Add(boxSizerLvl4_11, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextPrimReactance = new wxStaticText(m_panelFault, wxID_ANY, _("Primary reactance"), wxDefaultPosition,
                                                 wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_11->Add(m_staticTextPrimReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    m_textCtrlPrimReactance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlPrimReactance->SetHint(wxT(""));
#endif

    boxSizerLvl4_11->Add(m_textCtrlPrimReactance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_12 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_4->Add(boxSizerLvl4_12, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextSecResistance = new wxStaticText(m_panelFault, wxID_ANY, _("Secondary resistance"), wxDefaultPosition,
                                                 wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_12->Add(m_staticTextSecResistance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    m_textCtrlSecResistance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlSecResistance->SetHint(wxT(""));
#endif

    boxSizerLvl4_12->Add(m_textCtrlSecResistance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_13 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_4->Add(boxSizerLvl4_13, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextSecReactance = new wxStaticText(m_panelFault, wxID_ANY, _("Secondary reactance"), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);

    boxSizerLvl4_13->Add(m_staticTextSecReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    m_textCtrlSecReactance =
        new wxTextCtrl(m_panelFault, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelFault, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlSecReactance->SetHint(wxT(""));
#endif

    boxSizerLvl4_13->Add(m_textCtrlSecReactance, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonStability =
        new wxButton(this, wxID_ANY, _("Stability"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonStability, 0, wxALL | wxALIGN_LEFT, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("TransformerFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonStability->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(TransformerFormBase::OnStabilityButtonClick), NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TransformerFormBase::OnOKButtonClick), NULL,
                        this);
    m_buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                            wxCommandEventHandler(TransformerFormBase::OnCancelButtonClick), NULL, this);
}

TransformerFormBase::~TransformerFormBase()
{
    m_buttonStability->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                                  wxCommandEventHandler(TransformerFormBase::OnStabilityButtonClick), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TransformerFormBase::OnOKButtonClick),
                           NULL, this);
    m_buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(TransformerFormBase::OnCancelButtonClick), NULL, this);
}

LoadFormBase::LoadFormBase(wxWindow* parent,
                           wxWindowID id,
                           const wxString& title,
                           const wxPoint& pos,
                           const wxSize& size,
                           long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextName = new wxStaticText(m_panelGeneral, wxID_ANY, _("Name"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextName, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlName = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                    wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlName->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlName, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlName->SetMinSize(wxSize(300, -1));

    wxGridSizer* gridSizerLvl3_1 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_1->Add(gridSizerLvl3_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_1 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextActivePower = new wxStaticText(m_panelGeneral, wxID_ANY, _("Active power"), wxDefaultPosition,
                                               wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_1->Add(m_staticTextActivePower, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_1->Add(boxSizerLvl5_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlActivePower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlActivePower->SetHint(wxT(""));
#endif

    boxSizerLvl5_1->Add(m_textCtrlActivePower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceActivePowerArr;
    m_choiceActivePowerArr.Add(wxT("p.u."));
    m_choiceActivePowerArr.Add(wxT("W"));
    m_choiceActivePowerArr.Add(wxT("kW"));
    m_choiceActivePowerArr.Add(wxT("MW"));
    m_choiceActivePower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceActivePowerArr, 0);
    m_choiceActivePower->SetSelection(3);

    boxSizerLvl5_1->Add(m_choiceActivePower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_2 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextReactivePower = new wxStaticText(m_panelGeneral, wxID_ANY, _("Reactive power"), wxDefaultPosition,
                                                 wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_2->Add(m_staticTextReactivePower, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_2->Add(boxSizerLvl5_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlReactivePower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlReactivePower->SetHint(wxT(""));
#endif

    boxSizerLvl5_2->Add(m_textCtrlReactivePower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceReactivePowerArr;
    m_choiceReactivePowerArr.Add(wxT("p.u."));
    m_choiceReactivePowerArr.Add(wxT("VAr"));
    m_choiceReactivePowerArr.Add(wxT("kVAr"));
    m_choiceReactivePowerArr.Add(wxT("MVAr"));
    m_choiceReactivePower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceReactivePowerArr, 0);
    m_choiceReactivePower->SetSelection(3);

    boxSizerLvl5_2->Add(m_choiceReactivePower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    m_staticTextType = new wxStaticText(m_panelGeneral, wxID_ANY, _("Load type (power flow)"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextType, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceTypeArr;
    m_choiceTypeArr.Add(wxT("Constant power"));
    m_choiceTypeArr.Add(wxT("Constant impedance"));
    m_choiceType = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)),
                                m_choiceTypeArr, 0);
    m_choiceType->SetSelection(0);

    boxSizerLvl2_1->Add(m_choiceType, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    m_panelStability =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelStability, _("Stability"), false);

    wxBoxSizer* boxSizerLvl2_2 = new wxBoxSizer(wxVERTICAL);
    m_panelStability->SetSizer(boxSizerLvl2_2);

    m_checkBoxPlotData = new wxCheckBox(m_panelStability, wxID_ANY, _("Plot load data"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
    m_checkBoxPlotData->SetValue(false);

    boxSizerLvl2_2->Add(m_checkBoxPlotData, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_checkBoxUseCompLoad = new wxCheckBox(m_panelStability, wxID_ANY, _("Use ZIP load composition"), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
    m_checkBoxUseCompLoad->SetValue(false);

    boxSizerLvl2_2->Add(m_checkBoxUseCompLoad, 0, wxALL, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl3_2 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_2->Add(gridSizerLvl3_2, 1, wxEXPAND, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizerLvl4_3 =
        new wxStaticBoxSizer(new wxStaticBox(m_panelStability, wxID_ANY, _("Active power")), wxVERTICAL);

    gridSizerLvl3_2->Add(staticBoxSizerLvl4_3, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_3 = new wxBoxSizer(wxVERTICAL);

    staticBoxSizerLvl4_3->Add(boxSizerLvl5_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextActivePowerImp = new wxStaticText(m_panelStability, wxID_ANY, _("Constant impedance"),
                                                  wxDefaultPosition, wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_3->Add(m_staticTextActivePowerImp, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_3->Add(boxSizerLvl6_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlActivePowerImp = new wxTextCtrl(m_panelStability, wxID_ANY, wxT("100"), wxDefaultPosition,
                                              wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlActivePowerImp->SetHint(wxT(""));
#endif

    boxSizerLvl6_1->Add(m_textCtrlActivePowerImp, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPerc_1 = new wxStaticText(m_panelStability, wxID_ANY, _("%"), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl6_1->Add(m_staticTextPerc_1, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_4 = new wxBoxSizer(wxVERTICAL);

    staticBoxSizerLvl4_3->Add(boxSizerLvl5_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextActivePowerCur = new wxStaticText(m_panelStability, wxID_ANY, _("Constant current"), wxDefaultPosition,
                                                  wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_4->Add(m_staticTextActivePowerCur, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_4->Add(boxSizerLvl6_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlActivePowerCur = new wxTextCtrl(m_panelStability, wxID_ANY, wxT("0"), wxDefaultPosition,
                                              wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlActivePowerCur->SetHint(wxT(""));
#endif

    boxSizerLvl6_2->Add(m_textCtrlActivePowerCur, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPerc_2 = new wxStaticText(m_panelStability, wxID_ANY, _("%"), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl6_2->Add(m_staticTextPerc_2, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_5 = new wxBoxSizer(wxVERTICAL);

    staticBoxSizerLvl4_3->Add(boxSizerLvl5_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextActivePowerPow = new wxStaticText(m_panelStability, wxID_ANY, _("Constant power"), wxDefaultPosition,
                                                  wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_5->Add(m_staticTextActivePowerPow, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_3 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_5->Add(boxSizerLvl6_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlActivePowerPow = new wxTextCtrl(m_panelStability, wxID_ANY, wxT("0"), wxDefaultPosition,
                                              wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlActivePowerPow->SetHint(wxT(""));
#endif

    boxSizerLvl6_3->Add(m_textCtrlActivePowerPow, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPerc_3 = new wxStaticText(m_panelStability, wxID_ANY, _("%"), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl6_3->Add(m_staticTextPerc_3, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxStaticBoxSizer* staticBoxSizerLvl4_4 =
        new wxStaticBoxSizer(new wxStaticBox(m_panelStability, wxID_ANY, _("Reactive power")), wxVERTICAL);

    gridSizerLvl3_2->Add(staticBoxSizerLvl4_4, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_6 = new wxBoxSizer(wxVERTICAL);

    staticBoxSizerLvl4_4->Add(boxSizerLvl5_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextReactivePowerImp = new wxStaticText(m_panelStability, wxID_ANY, _("Constant impedance"),
                                                    wxDefaultPosition, wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_6->Add(m_staticTextReactivePowerImp, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_4 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_6->Add(boxSizerLvl6_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlReactivePowerImp = new wxTextCtrl(m_panelStability, wxID_ANY, wxT("100"), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlReactivePowerImp->SetHint(wxT(""));
#endif

    boxSizerLvl6_4->Add(m_textCtrlReactivePowerImp, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPerc_4 = new wxStaticText(m_panelStability, wxID_ANY, _("%"), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl6_4->Add(m_staticTextPerc_4, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_7 = new wxBoxSizer(wxVERTICAL);

    staticBoxSizerLvl4_4->Add(boxSizerLvl5_7, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextReactivePowerCur = new wxStaticText(m_panelStability, wxID_ANY, _("Constant current"),
                                                    wxDefaultPosition, wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_7->Add(m_staticTextReactivePowerCur, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_5 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_7->Add(boxSizerLvl6_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlReactivePowerCur = new wxTextCtrl(m_panelStability, wxID_ANY, wxT("0"), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlReactivePowerCur->SetHint(wxT(""));
#endif

    boxSizerLvl6_5->Add(m_textCtrlReactivePowerCur, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPerc_5 = new wxStaticText(m_panelStability, wxID_ANY, _("%"), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl6_5->Add(m_staticTextPerc_5, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_8 = new wxBoxSizer(wxVERTICAL);

    staticBoxSizerLvl4_4->Add(boxSizerLvl5_8, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextReactivePowerPow = new wxStaticText(m_panelStability, wxID_ANY, _("Constant power"), wxDefaultPosition,
                                                    wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_8->Add(m_staticTextReactivePowerPow, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl6_6 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl5_8->Add(boxSizerLvl6_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlReactivePowerPow = new wxTextCtrl(m_panelStability, wxID_ANY, wxT("0"), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlReactivePowerPow->SetHint(wxT(""));
#endif

    boxSizerLvl6_6->Add(m_textCtrlReactivePowerPow, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPerc_6 = new wxStaticText(m_panelStability, wxID_ANY, _("%"), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl6_6->Add(m_staticTextPerc_6, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonStabButton =
        new wxButton(this, wxID_ANY, _("Switching"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonStabButton, 0, wxALL | wxALIGN_LEFT, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_ButtonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_ButtonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("LoadFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_checkBoxUseCompLoad->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                   wxCommandEventHandler(LoadFormBase::OnCheckBoxCompLoadClick), NULL, this);
    m_buttonStabButton->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                                wxCommandEventHandler(LoadFormBase::OnStabilityButtonClick), NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LoadFormBase::OnOnButtonClick), NULL, this);
    m_ButtonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LoadFormBase::OnCancelButtonClick),
                            NULL, this);
}

LoadFormBase::~LoadFormBase()
{
    m_checkBoxUseCompLoad->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                      wxCommandEventHandler(LoadFormBase::OnCheckBoxCompLoadClick), NULL, this);
    m_buttonStabButton->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                                   wxCommandEventHandler(LoadFormBase::OnStabilityButtonClick), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LoadFormBase::OnOnButtonClick), NULL,
                           this);
    m_ButtonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LoadFormBase::OnCancelButtonClick),
                               NULL, this);
}

ReactiveShuntElementFormBase::ReactiveShuntElementFormBase(wxWindow* parent,
                                                           wxWindowID id,
                                                           const wxString& title,
                                                           const wxPoint& pos,
                                                           const wxSize& size,
                                                           long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextName = new wxStaticText(m_panelGeneral, wxID_ANY, _("Name"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextName, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlName = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                    wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlName->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlName, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlName->SetMinSize(wxSize(300, -1));

    wxGridSizer* gridSizerLvl3_1 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_1->Add(gridSizerLvl3_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_2 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextReactivePower = new wxStaticText(m_panelGeneral, wxID_ANY, _("Reactive power"), wxDefaultPosition,
                                                 wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_2->Add(m_staticTextReactivePower, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_2->Add(boxSizerLvl5_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlReactivePower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlReactivePower->SetHint(wxT(""));
#endif

    boxSizerLvl5_2->Add(m_textCtrlReactivePower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceReactivePowerArr;
    m_choiceReactivePowerArr.Add(wxT("p.u."));
    m_choiceReactivePowerArr.Add(wxT("VAr"));
    m_choiceReactivePowerArr.Add(wxT("kVAr"));
    m_choiceReactivePowerArr.Add(wxT("MVAr"));
    m_choiceReactivePower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceReactivePowerArr, 0);
    m_choiceReactivePower->SetSelection(3);

    boxSizerLvl5_2->Add(m_choiceReactivePower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonStabButton =
        new wxButton(this, wxID_ANY, _("Stability"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonStabButton, 0, wxALL | wxALIGN_LEFT, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("ReactiveShuntElementFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonStabButton->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                                wxCommandEventHandler(ReactiveShuntElementFormBase::OnStabilityButtonClick), NULL,
                                this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                        wxCommandEventHandler(ReactiveShuntElementFormBase::OnOKButtonClick), NULL, this);
    m_buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                            wxCommandEventHandler(ReactiveShuntElementFormBase::OnCancelButtonClick), NULL, this);
}

ReactiveShuntElementFormBase::~ReactiveShuntElementFormBase()
{
    m_buttonStabButton->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                                   wxCommandEventHandler(ReactiveShuntElementFormBase::OnStabilityButtonClick), NULL,
                                   this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                           wxCommandEventHandler(ReactiveShuntElementFormBase::OnOKButtonClick), NULL, this);
    m_buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(ReactiveShuntElementFormBase::OnCancelButtonClick), NULL, this);
}

SwitchingFormBase::SwitchingFormBase(wxWindow* parent,
                                     wxWindowID id,
                                     const wxString& title,
                                     const wxPoint& pos,
                                     const wxSize& size,
                                     long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerLvl2_1, 0, wxALL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl3_1 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_1->Add(boxSizerLvl3_1, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxArrayString m_pgMgrSwitchingsPropArr;
    wxUnusedVar(m_pgMgrSwitchingsPropArr);
    wxArrayInt m_pgMgrSwitchingsPropIntArr;
    wxUnusedVar(m_pgMgrSwitchingsPropIntArr);
    m_pgMgrSwitchingsProp =
        new wxPropertyGridManager(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)),
                                  wxPG_STATIC_LAYOUT | wxPG_SPLITTER_AUTO_CENTER | wxPG_BOLD_MODIFIED);

    boxSizerLvl3_1->Add(m_pgMgrSwitchingsProp, 1, wxALL, WXC_FROM_DIP(5));

    m_pgPropTitle = m_pgMgrSwitchingsProp->Append(new wxPropertyCategory(_("Switching properties")));
    m_pgPropTitle->SetHelpString(wxT(""));

    m_pgMgrSwitchingsPropArr.Clear();
    m_pgMgrSwitchingsPropIntArr.Clear();
    m_pgMgrSwitchingsPropArr.Add(_("Insert"));
    m_pgMgrSwitchingsPropArr.Add(_("Remove"));
    m_pgPropType = m_pgMgrSwitchingsProp->Append(
        new wxEnumProperty(_("Type"), wxPG_LABEL, m_pgMgrSwitchingsPropArr, m_pgMgrSwitchingsPropIntArr, 0));
    m_pgPropType->SetHelpString(wxT(""));

    m_pgPropTime = m_pgMgrSwitchingsProp->Append(new wxFloatProperty(_("Time (s)"), wxPG_LABEL, 0));
    m_pgPropTime->SetHelpString(wxT(""));
    m_pgMgrSwitchingsProp->SetMinSize(wxSize(150, -1));

    wxBoxSizer* boxSizerLvl3_3 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_1->Add(boxSizerLvl3_3, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_buttonInsert = new wxButton(this, wxID_ANY, _("Add"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl3_3->Add(m_buttonInsert, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonRemove = new wxButton(this, wxID_ANY, _("Remove"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl3_3->Add(m_buttonRemove, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonUp = new wxButton(this, wxID_ANY, _("Up"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl3_3->Add(m_buttonUp, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonDown = new wxButton(this, wxID_ANY, _("Down"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl3_3->Add(m_buttonDown, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl3_2 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_1->Add(boxSizerLvl3_2, 0, wxALL, WXC_FROM_DIP(5));

    m_staticTextSwList =
        new wxStaticText(this, wxID_ANY, _("Switching list"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl3_2->Add(m_staticTextSwList, 0, wxLEFT | wxRIGHT | wxTOP, WXC_FROM_DIP(5));

    m_listCtrlSwitchings =
        new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLC_REPORT);

    boxSizerLvl3_2->Add(m_listCtrlSwitchings, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    SetName(wxT("SwitchingFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_pgMgrSwitchingsProp->Connect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(SwitchingFormBase::OnChangeProperties),
                                   NULL, this);
    m_buttonInsert->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SwitchingFormBase::OnInsertButtonClick),
                            NULL, this);
    m_buttonRemove->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SwitchingFormBase::OnRemoveButtonClick),
                            NULL, this);
    m_buttonUp->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SwitchingFormBase::OnUpButtonClick), NULL,
                        this);
    m_buttonDown->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SwitchingFormBase::OnDownButtonClick),
                          NULL, this);
    m_listCtrlSwitchings->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(SwitchingFormBase::OnSelectItem),
                                  NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SwitchingFormBase::OnOKButtonClick), NULL,
                        this);
    m_buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SwitchingFormBase::OnCancelButtonClick),
                            NULL, this);
}

SwitchingFormBase::~SwitchingFormBase()
{
    m_pgMgrSwitchingsProp->Disconnect(wxEVT_PG_CHANGED,
                                      wxPropertyGridEventHandler(SwitchingFormBase::OnChangeProperties), NULL, this);
    m_buttonInsert->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(SwitchingFormBase::OnInsertButtonClick), NULL, this);
    m_buttonRemove->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(SwitchingFormBase::OnRemoveButtonClick), NULL, this);
    m_buttonUp->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SwitchingFormBase::OnUpButtonClick),
                           NULL, this);
    m_buttonDown->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SwitchingFormBase::OnDownButtonClick),
                             NULL, this);
    m_listCtrlSwitchings->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED,
                                     wxListEventHandler(SwitchingFormBase::OnSelectItem), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SwitchingFormBase::OnOKButtonClick),
                           NULL, this);
    m_buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(SwitchingFormBase::OnCancelButtonClick), NULL, this);
}

IndMotorFormBase::IndMotorFormBase(wxWindow* parent,
                                   wxWindowID id,
                                   const wxString& title,
                                   const wxPoint& pos,
                                   const wxSize& size,
                                   long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextName = new wxStaticText(m_panelGeneral, wxID_ANY, _("Name"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextName, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlName = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                    wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlName->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlName, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlName->SetMinSize(wxSize(300, -1));

    wxGridSizer* gridSizerLvl3_1 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_1->Add(gridSizerLvl3_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_15 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_15, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextNominalPower = new wxStaticText(m_panelGeneral, wxID_ANY, _("Rated power"), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_15->Add(m_staticTextNominalPower, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_15 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_15->Add(boxSizerLvl5_15, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlnominalPower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                            wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlnominalPower->SetHint(wxT(""));
#endif

    boxSizerLvl5_15->Add(m_textCtrlnominalPower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                         WXC_FROM_DIP(5));

    wxArrayString m_choiceNominalPowerArr;
    m_choiceNominalPowerArr.Add(wxT("VA"));
    m_choiceNominalPowerArr.Add(wxT("kVA"));
    m_choiceNominalPowerArr.Add(wxT("MVA"));
    m_choiceNominalPower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceNominalPowerArr, 0);
    m_choiceNominalPower->SetSelection(2);

    boxSizerLvl5_15->Add(m_choiceNominalPower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    gridSizerLvl3_1->Add(0, 0, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_1 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextActivePower = new wxStaticText(m_panelGeneral, wxID_ANY, _("Active power"), wxDefaultPosition,
                                               wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_1->Add(m_staticTextActivePower, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_1->Add(boxSizerLvl5_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlActivePower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlActivePower->SetHint(wxT(""));
#endif

    boxSizerLvl5_1->Add(m_textCtrlActivePower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceActivePowerArr;
    m_choiceActivePowerArr.Add(wxT("p.u."));
    m_choiceActivePowerArr.Add(wxT("W"));
    m_choiceActivePowerArr.Add(wxT("kW"));
    m_choiceActivePowerArr.Add(wxT("MW"));
    m_choiceActivePower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceActivePowerArr, 0);
    m_choiceActivePower->SetSelection(3);

    boxSizerLvl5_1->Add(m_choiceActivePower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_2 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextReactivePower = new wxStaticText(m_panelGeneral, wxID_ANY, _("Reactive power"), wxDefaultPosition,
                                                 wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_2->Add(m_staticTextReactivePower, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_2->Add(boxSizerLvl5_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlReactivePower = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlReactivePower->SetHint(wxT(""));
#endif

    boxSizerLvl5_2->Add(m_textCtrlReactivePower, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxArrayString m_choiceReactivePowerArr;
    m_choiceReactivePowerArr.Add(wxT("p.u."));
    m_choiceReactivePowerArr.Add(wxT("VAr"));
    m_choiceReactivePowerArr.Add(wxT("kVAr"));
    m_choiceReactivePowerArr.Add(wxT("MVAr"));
    m_choiceReactivePower = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceReactivePowerArr, 0);
    m_choiceReactivePower->SetSelection(3);

    boxSizerLvl5_2->Add(m_choiceReactivePower, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));

    m_checkBoxComputeQ =
        new wxCheckBox(m_panelGeneral, wxID_ANY, _("Calculate reactive power in load flow (using stability data)"),
                       wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    m_checkBoxComputeQ->SetValue(false);

    boxSizerLvl2_1->Add(m_checkBoxComputeQ, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_checkBoxUseMachinePower = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Use machine rated power as base"),
                                               wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    m_checkBoxUseMachinePower->SetValue(false);

    boxSizerLvl2_1->Add(m_checkBoxUseMachinePower, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_panelStability =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelStability, _("Stability"), false);

    wxBoxSizer* boxSizerLvl2_2 = new wxBoxSizer(wxVERTICAL);
    m_panelStability->SetSizer(boxSizerLvl2_2);

    m_checkBoxPlotIndMachine = new wxCheckBox(m_panelStability, wxID_ANY, _("Plot induction machine data"),
                                              wxDefaultPosition, wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
    m_checkBoxPlotIndMachine->SetValue(false);

    boxSizerLvl2_2->Add(m_checkBoxPlotIndMachine, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl3_2 = new wxGridSizer(0, 2, 0, 0);

    boxSizerLvl2_2->Add(gridSizerLvl3_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_8 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_8, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextInertia = new wxStaticText(m_panelStability, wxID_ANY, _("Inertia"), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl4_8->Add(m_staticTextInertia, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_12 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_8->Add(boxSizerLvl5_12, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlInertia = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                       wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlInertia->SetHint(wxT(""));
#endif

    boxSizerLvl5_12->Add(m_textCtrlInertia, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_staticTextS_1 = new wxStaticText(m_panelStability, wxID_ANY, _("s"), wxDefaultPosition,
                                       wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_12->Add(m_staticTextS_1, 0, wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    gridSizerLvl3_2->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_3 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextStatorResistence = new wxStaticText(m_panelStability, wxID_ANY, _("Stator resistence"),
                                                    wxDefaultPosition, wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl4_3->Add(m_staticTextStatorResistence, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_3 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_3->Add(boxSizerLvl5_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlStatorResistence = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                                wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlStatorResistence->SetHint(wxT(""));
#endif

    boxSizerLvl5_3->Add(m_textCtrlStatorResistence, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPU_1 = new wxStaticText(m_panelStability, wxID_ANY, _("p.u."), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_3->Add(m_staticTextPU_1, 0, wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_4 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextStatorReactance = new wxStaticText(m_panelStability, wxID_ANY, _("Stator reactance"), wxDefaultPosition,
                                                   wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl4_4->Add(m_staticTextStatorReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_4 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_4->Add(boxSizerLvl5_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlStatorReactance = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                               wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlStatorReactance->SetHint(wxT(""));
#endif

    boxSizerLvl5_4->Add(m_textCtrlStatorReactance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPU_2 = new wxStaticText(m_panelStability, wxID_ANY, _("p.u."), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_4->Add(m_staticTextPU_2, 0, wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_5 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextRotorResistence = new wxStaticText(m_panelStability, wxID_ANY, _("Rotor resistence"), wxDefaultPosition,
                                                   wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl4_5->Add(m_staticTextRotorResistence, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_6 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_5->Add(boxSizerLvl5_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlRotorResistence = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                               wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlRotorResistence->SetHint(wxT(""));
#endif

    boxSizerLvl5_6->Add(m_textCtrlRotorResistence, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPU_3 = new wxStaticText(m_panelStability, wxID_ANY, _("p.u."), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_6->Add(m_staticTextPU_3, 0, wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_6 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextRotorReactance = new wxStaticText(m_panelStability, wxID_ANY, _("Rotor reactance"), wxDefaultPosition,
                                                  wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl4_6->Add(m_staticTextRotorReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_7 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_6->Add(boxSizerLvl5_7, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlRotorReactance = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                              wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlRotorReactance->SetHint(wxT(""));
#endif

    boxSizerLvl5_7->Add(m_textCtrlRotorReactance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPU_4 = new wxStaticText(m_panelStability, wxID_ANY, _("p.u."), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_7->Add(m_staticTextPU_4, 0, wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_7 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_7, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextMagnetizingReactance =
        new wxStaticText(m_panelStability, wxID_ANY, _("Magnetizing reactance"), wxDefaultPosition,
                         wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl4_7->Add(m_staticTextMagnetizingReactance, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_8 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl4_7->Add(boxSizerLvl5_8, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlMagnetizingReactance = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                                    wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlMagnetizingReactance->SetHint(wxT(""));
#endif

    boxSizerLvl5_8->Add(m_textCtrlMagnetizingReactance, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextPU_5 = new wxStaticText(m_panelStability, wxID_ANY, _("p.u."), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_8->Add(m_staticTextPU_5, 0, wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_9 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_2->Add(boxSizerLvl4_9, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxUseKf = new wxCheckBox(m_panelStability, wxID_ANY, _("Use cage factor"), wxDefaultPosition,
                                     wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
    m_checkBoxUseKf->SetValue(false);

    boxSizerLvl4_9->Add(m_checkBoxUseKf, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlKf = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                  wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlKf->SetHint(wxT(""));
#endif

    boxSizerLvl4_9->Add(m_textCtrlKf, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl3_3 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_2->Add(boxSizerLvl3_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextLoadCharacteristic =
        new wxStaticText(m_panelStability, wxID_ANY, _("Load characteristic"), wxDefaultPosition,
                         wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl3_3->Add(m_staticTextLoadCharacteristic, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxGridSizer* gridSizerLvl4_8 = new wxGridSizer(0, 3, 0, 0);

    boxSizerLvl3_3->Add(gridSizerLvl4_8, 1, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_9 = new wxBoxSizer(wxHORIZONTAL);

    gridSizerLvl4_8->Add(boxSizerLvl5_9, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlA = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                 wxDLG_UNIT(m_panelStability, wxSize(50, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlA->SetHint(wxT(""));
#endif

    boxSizerLvl5_9->Add(m_textCtrlA, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    m_textCtrlA->SetMinSize(wxSize(50, -1));

    m_staticTextPlus = new wxStaticText(m_panelStability, wxID_ANY, _("+"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_9->Add(m_staticTextPlus, 0, wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_10 = new wxBoxSizer(wxHORIZONTAL);

    gridSizerLvl4_8->Add(boxSizerLvl5_10, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlB = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                 wxDLG_UNIT(m_panelStability, wxSize(50, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlB->SetHint(wxT(""));
#endif

    boxSizerLvl5_10->Add(m_textCtrlB, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    m_textCtrlB->SetMinSize(wxSize(50, -1));

    m_staticTextw = new wxStaticText(m_panelStability, wxID_ANY, _("w +"), wxDefaultPosition,
                                     wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_10->Add(m_staticTextw, 0, wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl5_11 = new wxBoxSizer(wxHORIZONTAL);

    gridSizerLvl4_8->Add(boxSizerLvl5_11, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_textCtrlC = new wxTextCtrl(m_panelStability, wxID_ANY, wxT(""), wxDefaultPosition,
                                 wxDLG_UNIT(m_panelStability, wxSize(50, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlC->SetHint(wxT(""));
#endif

    boxSizerLvl5_11->Add(m_textCtrlC, 1, wxLEFT | wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    m_textCtrlC->SetMinSize(wxSize(50, -1));

    m_staticTextw2 = new wxStaticText(m_panelStability, wxID_ANY, _("w2"), wxDefaultPosition,
                                      wxDLG_UNIT(m_panelStability, wxSize(-1, -1)), 0);

    boxSizerLvl5_11->Add(m_staticTextw2, 0, wxRIGHT | wxBOTTOM | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonSwitchingButton =
        new wxButton(this, wxID_ANY, _("Switching"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonSwitchingButton, 0, wxALL | wxALIGN_LEFT, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_ButtonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_ButtonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("IndMotorFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_checkBoxComputeQ->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                wxCommandEventHandler(IndMotorFormBase::OnCalcQInPFClick), NULL, this);
    m_checkBoxUseKf->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                             wxCommandEventHandler(IndMotorFormBase::OnCheckboxUseCageFactorClick), NULL, this);
    m_buttonSwitchingButton->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                                     wxCommandEventHandler(IndMotorFormBase::OnStabilityButtonClick), NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(IndMotorFormBase::OnOKButtonClick), NULL,
                        this);
    m_ButtonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(IndMotorFormBase::OnCancelButtonClick),
                            NULL, this);
}

IndMotorFormBase::~IndMotorFormBase()
{
    m_checkBoxComputeQ->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                   wxCommandEventHandler(IndMotorFormBase::OnCalcQInPFClick), NULL, this);
    m_checkBoxUseKf->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                wxCommandEventHandler(IndMotorFormBase::OnCheckboxUseCageFactorClick), NULL, this);
    m_buttonSwitchingButton->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                                        wxCommandEventHandler(IndMotorFormBase::OnStabilityButtonClick), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(IndMotorFormBase::OnOKButtonClick), NULL,
                           this);
    m_ButtonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(IndMotorFormBase::OnCancelButtonClick), NULL, this);
}

TextFormBase::TextFormBase(wxWindow* parent,
                           wxWindowID id,
                           const wxString& title,
                           const wxPoint& pos,
                           const wxSize& size,
                           long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    wxGridSizer* gridSizerLvl3_1 = new wxGridSizer(0, 3, 0, 0);

    boxSizerLvl2_1->Add(gridSizerLvl3_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_1 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_1, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextElement = new wxStaticText(m_panelGeneral, wxID_ANY, _("Element"), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_1->Add(m_staticTextElement, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceElementArr;
    m_choiceElementArr.Add(wxT("Bus"));
    m_choiceElementArr.Add(wxT("Generator"));
    m_choiceElementArr.Add(wxT("Line"));
    m_choiceElementArr.Add(wxT("Transformer"));
    m_choiceElementArr.Add(wxT("Load"));
    m_choiceElementArr.Add(wxT("Capacitor"));
    m_choiceElementArr.Add(wxT("Inductor"));
    m_choiceElementArr.Add(wxT("Synchronous compensator"));
    m_choiceElementArr.Add(wxT("Induction motor"));
    m_choiceElement = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                   wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceElementArr, 0);

    boxSizerLvl4_1->Add(m_choiceElement, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_2 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_2, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextName = new wxStaticText(m_panelGeneral, wxID_ANY, _("Element name"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_2->Add(m_staticTextName, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceNameArr;
    m_choiceName = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)),
                                m_choiceNameArr, 0);

    boxSizerLvl4_2->Add(m_choiceName, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_3 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_3, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextType = new wxStaticText(m_panelGeneral, wxID_ANY, _("Text type"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_3->Add(m_staticTextType, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceTextTypeArr;
    m_choiceTextType = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                    wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceTextTypeArr, 0);

    boxSizerLvl4_3->Add(m_choiceTextType, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_4 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_4, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextFromBus = new wxStaticText(m_panelGeneral, wxID_ANY, _("From bus"), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_4->Add(m_staticTextFromBus, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceTextFromBusArr;
    m_choiceTextFromBus = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceTextFromBusArr, 0);

    boxSizerLvl4_4->Add(m_choiceTextFromBus, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_5 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_5, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextToBus = new wxStaticText(m_panelGeneral, wxID_ANY, _("To bus"), wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_5->Add(m_staticTextToBus, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceTextToBusArr;
    m_choiceTextToBus = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                     wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceTextToBusArr, 0);

    boxSizerLvl4_5->Add(m_choiceTextToBus, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl4_6 = new wxBoxSizer(wxVERTICAL);

    gridSizerLvl3_1->Add(boxSizerLvl4_6, 0, wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextUnit = new wxStaticText(m_panelGeneral, wxID_ANY, _("Unit"), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl4_6->Add(m_staticTextUnit, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxArrayString m_choiceTextUnitArr;
    m_choiceTextUnit = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                    wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceTextUnitArr, 0);

    boxSizerLvl4_6->Add(m_choiceTextUnit, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl3_2 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl2_1->Add(boxSizerLvl3_2, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextDecimal = new wxStaticText(m_panelGeneral, wxID_ANY, _("Decimal places:"), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl3_2->Add(m_staticTextDecimal, 0, wxALL | wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlDecimal = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT("2"), wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), wxTE_PROCESS_ENTER);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlDecimal->SetHint(wxT(""));
#endif

    boxSizerLvl3_2->Add(m_textCtrlDecimal, 0, wxALL | wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    boxSizerLvl3_2->Add(0, 0, 0, wxALL, WXC_FROM_DIP(5));

    m_staticTextPreview = new wxStaticText(m_panelGeneral, wxID_ANY, _("Preview:"), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl3_2->Add(m_staticTextPreview, 0, wxALL | wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlPreview = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), wxTE_CENTRE);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlPreview->SetHint(wxT(""));
#endif

    boxSizerLvl3_2->Add(m_textCtrlPreview, 1, wxALL | wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_ButtonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_ButtonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("TextFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_choiceElement->Connect(wxEVT_COMMAND_CHOICE_SELECTED,
                             wxCommandEventHandler(TextFormBase::OnElementChoiceSelected), NULL, this);
    m_choiceName->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(TextFormBase::OnNameChoiceSelected),
                          NULL, this);
    m_choiceTextType->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(TextFormBase::OnTypeChoiceSelected),
                              NULL, this);
    m_choiceTextFromBus->Connect(wxEVT_COMMAND_CHOICE_SELECTED,
                                 wxCommandEventHandler(TextFormBase::OnFromBusChoiceSelected), NULL, this);
    m_choiceTextToBus->Connect(wxEVT_COMMAND_CHOICE_SELECTED,
                               wxCommandEventHandler(TextFormBase::OnToBusChoiceSelected), NULL, this);
    m_choiceTextUnit->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(TextFormBase::OnUnitChoiceSelected),
                              NULL, this);
    m_textCtrlDecimal->Connect(wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(TextFormBase::OnTextEnter), NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TextFormBase::OnOKButtonClick), NULL, this);
    m_ButtonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TextFormBase::OnCancelButtonClick),
                            NULL, this);
}

TextFormBase::~TextFormBase()
{
    m_choiceElement->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED,
                                wxCommandEventHandler(TextFormBase::OnElementChoiceSelected), NULL, this);
    m_choiceName->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(TextFormBase::OnNameChoiceSelected),
                             NULL, this);
    m_choiceTextType->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED,
                                 wxCommandEventHandler(TextFormBase::OnTypeChoiceSelected), NULL, this);
    m_choiceTextFromBus->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED,
                                    wxCommandEventHandler(TextFormBase::OnFromBusChoiceSelected), NULL, this);
    m_choiceTextToBus->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED,
                                  wxCommandEventHandler(TextFormBase::OnToBusChoiceSelected), NULL, this);
    m_choiceTextUnit->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED,
                                 wxCommandEventHandler(TextFormBase::OnUnitChoiceSelected), NULL, this);
    m_textCtrlDecimal->Disconnect(wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(TextFormBase::OnTextEnter), NULL,
                                  this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TextFormBase::OnOKButtonClick), NULL,
                           this);
    m_ButtonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TextFormBase::OnCancelButtonClick),
                               NULL, this);
}

TransferFunctionFormBase::TransferFunctionFormBase(wxWindow* parent,
                                                   wxWindowID id,
                                                   const wxString& title,
                                                   const wxPoint& pos,
                                                   const wxSize& size,
                                                   long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextNumerator = new wxStaticText(m_panelGeneral, wxID_ANY, _("Numerator parameters"), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextNumerator, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlNumerator = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlNumerator->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlNumerator, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlNumerator->SetMinSize(wxSize(300, -1));

    m_staticTextDenominator = new wxStaticText(m_panelGeneral, wxID_ANY, _("Denominator parameters"), wxDefaultPosition,
                                               wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextDenominator, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_textCtrlDenominator = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                           wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlDenominator->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlDenominator, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlDenominator->SetMinSize(wxSize(300, -1));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_ButtonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_ButtonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("TransferFunctionFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TransferFunctionFormBase::OnOKClick), NULL,
                        this);
    m_ButtonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                            wxCommandEventHandler(TransferFunctionFormBase::OnCancelClick), NULL, this);
}

TransferFunctionFormBase::~TransferFunctionFormBase()
{
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(TransferFunctionFormBase::OnOKClick),
                           NULL, this);
    m_ButtonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(TransferFunctionFormBase::OnCancelClick), NULL, this);
}

SumFormBase::SumFormBase(wxWindow* parent,
                         wxWindowID id,
                         const wxString& title,
                         const wxPoint& pos,
                         const wxSize& size,
                         long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextSigns = new wxStaticText(m_panelGeneral, wxID_ANY, _("Signs"), wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextSigns, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlSigns = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                     wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlSigns->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlSigns, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlSigns->SetMinSize(wxSize(300, -1));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_ButtonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_ButtonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("SumFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SumFormBase::OnOKClick), NULL, this);
    m_ButtonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SumFormBase::OnCancelClick), NULL,
                            this);
}

SumFormBase::~SumFormBase()
{
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SumFormBase::OnOKClick), NULL, this);
    m_ButtonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(SumFormBase::OnCancelClick), NULL,
                               this);
}

LimiterFormBase::LimiterFormBase(wxWindow* parent,
                                 wxWindowID id,
                                 const wxString& title,
                                 const wxPoint& pos,
                                 const wxSize& size,
                                 long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextUpLimiter = new wxStaticText(m_panelGeneral, wxID_ANY, _("Upper limit"), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextUpLimiter, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlUpLimit = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlUpLimit->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlUpLimit, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlUpLimit->SetMinSize(wxSize(100, -1));

    m_staticTextLowLimit = new wxStaticText(m_panelGeneral, wxID_ANY, _("Lower limit"), wxDefaultPosition,
                                            wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextLowLimit, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlLowLimit = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlLowLimit->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlLowLimit, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlLowLimit->SetMinSize(wxSize(100, -1));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_ButtonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_ButtonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("LimiterFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LimiterFormBase::OnOKButtonClick), NULL,
                        this);
    m_ButtonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LimiterFormBase::OnCancelButtonClick),
                            NULL, this);
}

LimiterFormBase::~LimiterFormBase()
{
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(LimiterFormBase::OnOKButtonClick), NULL,
                           this);
    m_ButtonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(LimiterFormBase::OnCancelButtonClick), NULL, this);
}

RateLimiterFormBase::RateLimiterFormBase(wxWindow* parent,
                                         wxWindowID id,
                                         const wxString& title,
                                         const wxPoint& pos,
                                         const wxSize& size,
                                         long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextUpLimiter = new wxStaticText(m_panelGeneral, wxID_ANY, _("Upper limit"), wxDefaultPosition,
                                             wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextUpLimiter, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlUpLimit = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlUpLimit->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlUpLimit, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlUpLimit->SetMinSize(wxSize(100, -1));

    m_staticTextLowLimit = new wxStaticText(m_panelGeneral, wxID_ANY, _("Lower limit"), wxDefaultPosition,
                                            wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextLowLimit, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlLowLimit = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                        wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlLowLimit->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlLowLimit, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlLowLimit->SetMinSize(wxSize(100, -1));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_ButtonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_ButtonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("RateLimiterFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(RateLimiterFormBase::OnOKButtonClick), NULL,
                        this);
    m_ButtonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                            wxCommandEventHandler(RateLimiterFormBase::OnCancelButtonClick), NULL, this);
}

RateLimiterFormBase::~RateLimiterFormBase()
{
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(RateLimiterFormBase::OnOKButtonClick),
                           NULL, this);
    m_ButtonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(RateLimiterFormBase::OnCancelButtonClick), NULL, this);
}

ExponentialFormBase::ExponentialFormBase(wxWindow* parent,
                                         wxWindowID id,
                                         const wxString& title,
                                         const wxPoint& pos,
                                         const wxSize& size,
                                         long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextExp = new wxStaticText(m_panelGeneral, wxID_ANY, _("y = A.eB.x"), wxDefaultPosition,
                                       wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), wxALIGN_CENTRE);

    boxSizerLvl2_1->Add(m_staticTextExp, 1,
                        wxLEFT | wxRIGHT | wxTOP | wxEXPAND | wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    m_staticTextAValue = new wxStaticText(m_panelGeneral, wxID_ANY, _("A value"), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextAValue, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlAValue = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                      wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlAValue->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlAValue, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlAValue->SetMinSize(wxSize(100, -1));

    m_staticTextBValue = new wxStaticText(m_panelGeneral, wxID_ANY, _("B value"), wxDefaultPosition,
                                          wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextBValue, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlBValue = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                      wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlBValue->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlBValue, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlBValue->SetMinSize(wxSize(100, -1));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("ExponentialFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ExponentialFormBase::OnOKButtonClick), NULL,
                        this);
    m_buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                            wxCommandEventHandler(ExponentialFormBase::OnCancelButtonClick), NULL, this);
}

ExponentialFormBase::~ExponentialFormBase()
{
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ExponentialFormBase::OnOKButtonClick),
                           NULL, this);
    m_buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(ExponentialFormBase::OnCancelButtonClick), NULL, this);
}

ConstantFormBase::ConstantFormBase(wxWindow* parent,
                                   wxWindowID id,
                                   const wxString& title,
                                   const wxPoint& pos,
                                   const wxSize& size,
                                   long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextValue = new wxStaticText(m_panelGeneral, wxID_ANY, _("Constant value"), wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextValue, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlValue = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                     wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlValue->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlValue, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlValue->SetMinSize(wxSize(100, -1));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("ConstantFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ConstantFormBase::OnOKButtonClick), NULL,
                        this);
    m_buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ConstantFormBase::OnCancelButtonClick),
                            NULL, this);
}

ConstantFormBase::~ConstantFormBase()
{
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ConstantFormBase::OnOKButtonClick), NULL,
                           this);
    m_buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(ConstantFormBase::OnCancelButtonClick), NULL, this);
}

GainFormBase::GainFormBase(wxWindow* parent,
                           wxWindowID id,
                           const wxString& title,
                           const wxPoint& pos,
                           const wxSize& size,
                           long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextValue = new wxStaticText(m_panelGeneral, wxID_ANY, _("Gain value"), wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextValue, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlValue = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT(""), wxDefaultPosition,
                                     wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlValue->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlValue, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlValue->SetMinSize(wxSize(100, -1));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("GainFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GainFormBase::OnOKButtonClick), NULL, this);
    m_buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GainFormBase::OnCancelButtonClick),
                            NULL, this);
}

GainFormBase::~GainFormBase()
{
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GainFormBase::OnOKButtonClick), NULL,
                           this);
    m_buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GainFormBase::OnCancelButtonClick),
                               NULL, this);
}

IOControlFormBase::IOControlFormBase(wxWindow* parent,
                                     wxWindowID id,
                                     const wxString& title,
                                     const wxPoint& pos,
                                     const wxSize& size,
                                     long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_checkBoxInput = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Input"), wxDefaultPosition,
                                     wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    m_checkBoxInput->SetValue(false);

    boxSizerLvl2_1->Add(m_checkBoxInput, 0, wxLEFT | wxRIGHT | wxTOP, WXC_FROM_DIP(5));

    wxArrayString m_choiceInputArr;
    m_choiceInput = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                 wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceInputArr, 0);

    boxSizerLvl2_1->Add(m_choiceInput, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    m_checkBoxOutput = new wxCheckBox(m_panelGeneral, wxID_ANY, _("Output"), wxDefaultPosition,
                                      wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    m_checkBoxOutput->SetValue(false);

    boxSizerLvl2_1->Add(m_checkBoxOutput, 0, wxLEFT | wxRIGHT | wxTOP, WXC_FROM_DIP(5));

    wxArrayString m_choiceOutputArr;
    m_choiceOutput = new wxChoice(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                  wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), m_choiceOutputArr, 0);

    boxSizerLvl2_1->Add(m_choiceOutput, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_ButtonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_ButtonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("IOControlFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_checkBoxInput->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(IOControlFormBase::OnInputChecked),
                             NULL, this);
    m_checkBoxOutput->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(IOControlFormBase::OnOutputChecked),
                              NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(IOControlFormBase::OnOKButtonClick), NULL,
                        this);
    m_ButtonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(IOControlFormBase::OnCancelButtonClick),
                            NULL, this);
}

IOControlFormBase::~IOControlFormBase()
{
    m_checkBoxInput->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                wxCommandEventHandler(IOControlFormBase::OnInputChecked), NULL, this);
    m_checkBoxOutput->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED,
                                 wxCommandEventHandler(IOControlFormBase::OnOutputChecked), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(IOControlFormBase::OnOKButtonClick),
                           NULL, this);
    m_ButtonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(IOControlFormBase::OnCancelButtonClick), NULL, this);
}

MathExpressionFormBase::MathExpressionFormBase(wxWindow* parent,
                                               wxWindowID id,
                                               const wxString& title,
                                               const wxPoint& pos,
                                               const wxSize& size,
                                               long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    m_notebook = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxBK_DEFAULT);
    m_notebook->SetName(wxT("m_notebook"));

    boxSizerLvl1_1->Add(m_notebook, 1, wxEXPAND, WXC_FROM_DIP(5));

    m_panelGeneral =
        new wxPanel(m_notebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebook->AddPage(m_panelGeneral, _("General"), false);

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxVERTICAL);
    m_panelGeneral->SetSizer(boxSizerLvl2_1);

    m_staticTextVariables = new wxStaticText(m_panelGeneral, wxID_ANY, _("Input variables (space separated)"),
                                             wxDefaultPosition, wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);

    boxSizerLvl2_1->Add(m_staticTextVariables, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlVariables = new wxTextCtrl(m_panelGeneral, wxID_ANY, wxT("x y"), wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlVariables->SetHint(wxT(""));
#endif

    boxSizerLvl2_1->Add(m_textCtrlVariables, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlVariables->SetMinSize(wxSize(100, -1));

    m_stcMathExpr = new wxStyledTextCtrl(m_panelGeneral, wxID_ANY, wxDefaultPosition,
                                         wxDLG_UNIT(m_panelGeneral, wxSize(-1, -1)), 0);
    wxFont m_stcMathExprFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false,
                             wxT("Courier New"));
    m_stcMathExpr->SetFont(m_stcMathExprFont);
    // Configure the fold margin
    m_stcMathExpr->SetMarginType(4, wxSTC_MARGIN_SYMBOL);
    m_stcMathExpr->SetMarginMask(4, wxSTC_MASK_FOLDERS);
    m_stcMathExpr->SetMarginSensitive(4, true);
    m_stcMathExpr->SetMarginWidth(4, 16);

    m_stcMathExpr->SetProperty(wxT("fold"), wxT("1"));
    m_stcMathExpr->MarkerDefine(wxSTC_MARKNUM_FOLDEROPEN, wxSTC_MARK_ARROWDOWN);
    m_stcMathExpr->MarkerDefine(wxSTC_MARKNUM_FOLDER, wxSTC_MARK_ARROW);
    m_stcMathExpr->MarkerDefine(wxSTC_MARKNUM_FOLDERSUB, wxSTC_MARK_BACKGROUND);
    m_stcMathExpr->MarkerDefine(wxSTC_MARKNUM_FOLDERTAIL, wxSTC_MARK_BACKGROUND);
    m_stcMathExpr->MarkerDefine(wxSTC_MARKNUM_FOLDEREND, wxSTC_MARK_ARROW);
    m_stcMathExpr->MarkerDefine(wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_ARROWDOWN);
    m_stcMathExpr->MarkerDefine(wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_BACKGROUND);
    // Configure the tracker margin
    m_stcMathExpr->SetMarginWidth(1, 0);

    // Configure the symbol margin
    m_stcMathExpr->SetMarginType(2, wxSTC_MARGIN_SYMBOL);
    m_stcMathExpr->SetMarginMask(2, ~(wxSTC_MASK_FOLDERS));
    m_stcMathExpr->SetMarginWidth(2, 0);
    m_stcMathExpr->SetMarginSensitive(2, true);

    // Configure the line numbers margin
    m_stcMathExpr->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_stcMathExpr->SetMarginWidth(0, 0);

    // Configure the line symbol margin
    m_stcMathExpr->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_stcMathExpr->SetMarginMask(3, 0);
    m_stcMathExpr->SetMarginWidth(3, 0);
    // Select the lexer
    m_stcMathExpr->SetLexer(wxSTC_LEX_PASCAL);
    // Set default font / styles
    m_stcMathExpr->StyleClearAll();
    for(int i = 0; i < wxSTC_STYLE_MAX; ++i) { m_stcMathExpr->StyleSetFont(i, m_stcMathExprFont); }
    m_stcMathExpr->SetWrapMode(0);
    m_stcMathExpr->SetIndentationGuides(0);
    m_stcMathExpr->SetKeyWords(0, wxT(""));
    m_stcMathExpr->SetKeyWords(1, wxT(""));
    m_stcMathExpr->SetKeyWords(2, wxT(""));
    m_stcMathExpr->SetKeyWords(3, wxT(""));
    m_stcMathExpr->SetKeyWords(4, wxT(""));

    boxSizerLvl2_1->Add(m_stcMathExpr, 0, wxALL, WXC_FROM_DIP(5));
    m_stcMathExpr->SetMinSize(wxSize(400, 200));

    m_staticTextCheckStatus = new wxStaticText(this, wxID_ANY, _("No checks performed"), wxDefaultPosition,
                                               wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl1_1->Add(m_staticTextCheckStatus, 0,
                        wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_buttonCheck =
        new wxButton(this, wxID_ANY, _("Check expression"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonCheck, 0, wxALL | wxALIGN_LEFT, WXC_FROM_DIP(5));

    boxSizerBottomButtons->Add(0, 0, 1, wxALL, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook)) {
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook);
    }
#endif

    SetName(wxT("MathExpressionFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_textCtrlVariables->Connect(wxEVT_COMMAND_TEXT_UPDATED,
                                 wxCommandEventHandler(MathExpressionFormBase::OnTextUpdate), NULL, this);
    m_textCtrlVariables->Connect(wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(MathExpressionFormBase::OnTextEnter),
                                 NULL, this);
    m_stcMathExpr->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MathExpressionFormBase::OnLeftClickDown), NULL, this);
    m_buttonCheck->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                           wxCommandEventHandler(MathExpressionFormBase::OnCheckButtonClick), NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MathExpressionFormBase::OnOKButtonClick),
                        NULL, this);
    m_buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                            wxCommandEventHandler(MathExpressionFormBase::OnCancelButtonClick), NULL, this);
}

MathExpressionFormBase::~MathExpressionFormBase()
{
    m_textCtrlVariables->Disconnect(wxEVT_COMMAND_TEXT_UPDATED,
                                    wxCommandEventHandler(MathExpressionFormBase::OnTextUpdate), NULL, this);
    m_textCtrlVariables->Disconnect(wxEVT_COMMAND_TEXT_ENTER,
                                    wxCommandEventHandler(MathExpressionFormBase::OnTextEnter), NULL, this);
    m_stcMathExpr->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MathExpressionFormBase::OnLeftClickDown), NULL,
                              this);
    m_buttonCheck->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                              wxCommandEventHandler(MathExpressionFormBase::OnCheckButtonClick), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MathExpressionFormBase::OnOKButtonClick),
                           NULL, this);
    m_buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(MathExpressionFormBase::OnCancelButtonClick), NULL, this);
}

HarmCurrentFormBase::HarmCurrentFormBase(wxWindow* parent,
                                         wxWindowID id,
                                         const wxString& title,
                                         const wxPoint& pos,
                                         const wxSize& size,
                                         long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9EE9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizerLvl1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizerLvl1_1);

    wxBoxSizer* boxSizerLvl2_2 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl1_1->Add(boxSizerLvl2_2, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_staticTextName =
        new wxStaticText(this, wxID_ANY, _("Name"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl2_2->Add(m_staticTextName, 0, wxLEFT | wxRIGHT | wxTOP | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_textCtrlName = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
#if wxVERSION_NUMBER >= 3000
    m_textCtrlName->SetHint(wxT(""));
#endif

    boxSizerLvl2_2->Add(m_textCtrlName, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND | wxALIGN_CENTER_VERTICAL,
                        WXC_FROM_DIP(5));
    m_textCtrlName->SetMinSize(wxSize(300, -1));

    wxBoxSizer* boxSizerLvl2_1 = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerLvl2_1, 0, wxALL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl3_1 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_1->Add(boxSizerLvl3_1, 0, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    wxArrayString m_pgMgrHarmCurrentPropArr;
    wxUnusedVar(m_pgMgrHarmCurrentPropArr);
    wxArrayInt m_pgMgrHarmCurrentPropIntArr;
    wxUnusedVar(m_pgMgrHarmCurrentPropIntArr);
    m_pgMgrHarmCurrentProp =
        new wxPropertyGridManager(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)),
                                  wxPG_STATIC_LAYOUT | wxPG_SPLITTER_AUTO_CENTER | wxPG_BOLD_MODIFIED);

    boxSizerLvl3_1->Add(m_pgMgrHarmCurrentProp, 1, wxALL, WXC_FROM_DIP(5));

    m_pgPropTitle = m_pgMgrHarmCurrentProp->Append(new wxPropertyCategory(_("Harmonic Current properties")));
    m_pgPropTitle->SetHelpString(wxT(""));

    m_pgPropHarmOrder = m_pgMgrHarmCurrentProp->Append(new wxIntProperty(_("Order"), wxPG_LABEL, 3));
    m_pgPropHarmOrder->SetHelpString(wxT(""));

    m_pgPropHarmCurrent = m_pgMgrHarmCurrentProp->Append(new wxFloatProperty(_("Current"), wxPG_LABEL, 0));
    m_pgPropHarmCurrent->SetHelpString(wxT(""));

    m_pgMgrHarmCurrentPropArr.Clear();
    m_pgMgrHarmCurrentPropIntArr.Clear();
    m_pgMgrHarmCurrentPropArr.Add(_("A"));
    m_pgMgrHarmCurrentPropArr.Add(_("p.u."));
    m_pgPropUnit = m_pgMgrHarmCurrentProp->Append(
        new wxEnumProperty(_("Unit"), wxPG_LABEL, m_pgMgrHarmCurrentPropArr, m_pgMgrHarmCurrentPropIntArr, 0));
    m_pgPropUnit->SetHelpString(wxT(""));

    m_pgPropHarmAngle = m_pgMgrHarmCurrentProp->Append(new wxFloatProperty(_("Angle (degrees)"), wxPG_LABEL, 0));
    m_pgPropHarmAngle->SetHelpString(wxT(""));
    m_pgMgrHarmCurrentProp->SetMinSize(wxSize(300, -1));

    wxBoxSizer* boxSizerLvl3_3 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_1->Add(boxSizerLvl3_3, 0, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    m_buttonInsert = new wxButton(this, wxID_ANY, _("Add"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl3_3->Add(m_buttonInsert, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonRemove = new wxButton(this, wxID_ANY, _("Remove"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl3_3->Add(m_buttonRemove, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizerLvl3_2 = new wxBoxSizer(wxVERTICAL);

    boxSizerLvl2_1->Add(boxSizerLvl3_2, 0, wxALL, WXC_FROM_DIP(5));

    m_staticTextHarmCurrentList = new wxStaticText(this, wxID_ANY, _("Injected harmonic currents"), wxDefaultPosition,
                                                   wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerLvl3_2->Add(m_staticTextHarmCurrentList, 0, wxLEFT | wxRIGHT | wxTOP, WXC_FROM_DIP(5));

    m_listCtrlHarmCurrentList =
        new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxLC_REPORT);

    boxSizerLvl3_2->Add(m_listCtrlHarmCurrentList, 0, wxLEFT | wxRIGHT | wxBOTTOM, WXC_FROM_DIP(5));
    m_listCtrlHarmCurrentList->SetMinSize(wxSize(400, -1));

    wxBoxSizer* boxSizerBottomButtons = new wxBoxSizer(wxHORIZONTAL);

    boxSizerLvl1_1->Add(boxSizerBottomButtons, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonOK = new wxButton(this, wxID_ANY, _("OK"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonOK, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    m_buttonCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);

    boxSizerBottomButtons->Add(m_buttonCancel, 0, wxALL | wxALIGN_RIGHT, WXC_FROM_DIP(5));

    SetName(wxT("HarmCurrentFormBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1, -1)));
    if(GetSizer()) { GetSizer()->Fit(this); }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonInsert->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HarmCurrentFormBase::OnAddButtonClick),
                            NULL, this);
    m_buttonRemove->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                            wxCommandEventHandler(HarmCurrentFormBase::OnRemoveButtonClick), NULL, this);
    m_buttonOK->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HarmCurrentFormBase::OnOKButtonClick), NULL,
                        this);
    m_buttonCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED,
                            wxCommandEventHandler(HarmCurrentFormBase::OnCancelButtonClick), NULL, this);
}

HarmCurrentFormBase::~HarmCurrentFormBase()
{
    m_buttonInsert->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(HarmCurrentFormBase::OnAddButtonClick), NULL, this);
    m_buttonRemove->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(HarmCurrentFormBase::OnRemoveButtonClick), NULL, this);
    m_buttonOK->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(HarmCurrentFormBase::OnOKButtonClick),
                           NULL, this);
    m_buttonCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED,
                               wxCommandEventHandler(HarmCurrentFormBase::OnCancelButtonClick), NULL, this);
}
