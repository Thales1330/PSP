//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: ChartView.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "ChartViewBase.h"


// Declare the bitmap loading function
extern void wxCE3EBInitBitmapResources();


namespace {
// return the wxBORDER_SIMPLE that matches the current application theme
wxBorder get_border_simple_theme_aware_bit() {
#if wxVERSION_NUMBER >= 3300 && defined(__WXMSW__)
    return wxSystemSettings::GetAppearance().IsDark() ? wxBORDER_SIMPLE : wxBORDER_STATIC;
#else
    return wxBORDER_DEFAULT;
#endif
} // DoGetBorderSimpleBit
bool bBitmapLoaded = false;
} // namespace


ChartViewBase::ChartViewBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCE3EBInitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("chart16"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("chart32"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("chart64"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("chart128"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("chart256"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_menuFile = new wxMenu();
    m_menuBar->Append(m_menuFile, _("File"));
    
    m_menuItemSaveImage = new wxMenuItem(m_menuFile, wxID_ANY, _("Save chart as image"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemSaveImage);
    
    m_menuItemSendToClipboard = new wxMenuItem(m_menuFile, wxID_ANY, _("Send to clipboard"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemSendToClipboard);
    
    m_menuItemExportCSV = new wxMenuItem(m_menuFile, wxID_ANY, _("Export CSV..."), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemExportCSV);
    
    m_menuFile->AppendSeparator();
    
    m_menuItemExit = new wxMenuItem(m_menuFile, wxID_ANY, _("Exit"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemExit);
    
    m_menuView = new wxMenu();
    m_menuBar->Append(m_menuView, _("View"));
    
    m_menuItemFit = new wxMenuItem(m_menuView, wxID_ANY, _("Fit"), wxT(""), wxITEM_NORMAL);
    m_menuView->Append(m_menuItemFit);
    
    m_menuView->AppendSeparator();
    
    m_menuItemShowGrid = new wxMenuItem(m_menuView, wxID_ANY, _("Show grid"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_menuItemShowGrid);
    
    m_menuItemShowLabel = new wxMenuItem(m_menuView, wxID_ANY, _("Show label"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_menuItemShowLabel);
    
    m_menuItemShowCoordinates = new wxMenuItem(m_menuView, wxID_ANY, _("Show coordinates"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_menuItemShowCoordinates);
    
    m_menuItemDarkTheme = new wxMenuItem(m_menuView, wxID_ANY, _("Dark theme"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_menuItemDarkTheme);
    
    wxBoxSizer* boxSizer_lvl1_1 = new wxBoxSizer(wxHORIZONTAL);
    this->SetSizer(boxSizer_lvl1_1);
    
    wxBoxSizer* boxSizer_lvl2_1 = new wxBoxSizer(wxVERTICAL);
    
    boxSizer_lvl1_1->Add(boxSizer_lvl2_1, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_treeCtrl = new wxTreeCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTR_DEFAULT_STYLE|wxTR_HIDE_ROOT);
    
    boxSizer_lvl2_1->Add(m_treeCtrl, 1, 0, WXC_FROM_DIP(5));
    m_treeCtrl->SetMinSize(wxSize(250,-1));
    
    wxArrayString m_pgMgrArr;
    wxUnusedVar(m_pgMgrArr);
    wxArrayInt m_pgMgrIntArr;
    wxUnusedVar(m_pgMgrIntArr);
    m_pgMgr = new wxPropertyGridManager(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    
    boxSizer_lvl2_1->Add(m_pgMgr, 0, 0, WXC_FROM_DIP(5));
    
    m_pgPropLineProp = m_pgMgr->Append(  new wxPropertyCategory( _("Line properties") ) );
    m_pgPropLineProp->SetHelpString(wxT(""));
    
    m_pgPropDraw = m_pgMgr->AppendIn( m_pgPropLineProp,  new wxBoolProperty( _("Draw"), wxPG_LABEL, 1) );
    m_pgPropDraw->SetHelpString(wxT(""));
    m_pgPropDraw->SetEditor( wxT("CheckBox") );
    
    m_pgProplineThick = m_pgMgr->AppendIn( m_pgPropLineProp,  new wxIntProperty( _("Thickness"), wxPG_LABEL, 1) );
    m_pgProplineThick->SetHelpString(wxT(""));
    m_pgProplineThick->SetEditor( wxT("TextCtrl") );
    
    m_pgMgrArr.Clear();
    m_pgMgrIntArr.Clear();
    m_pgProplineType = m_pgMgr->AppendIn( m_pgPropLineProp,  new wxEnumProperty( _("Type"), wxPG_LABEL, m_pgMgrArr, m_pgMgrIntArr, 0) );
    m_pgProplineType->SetHelpString(wxT(""));
    m_pgProplineType->SetEditor( wxT("Choice") );
    
    m_pgMgrArr.Clear();
    m_pgMgrIntArr.Clear();
    m_pgMgrArr.Add(_("Y"));
    m_pgMgrArr.Add(_("X"));
    m_pgProplineAxis = m_pgMgr->AppendIn( m_pgPropLineProp,  new wxEnumProperty( _("Axis"), wxPG_LABEL, m_pgMgrArr, m_pgMgrIntArr, 0) );
    m_pgProplineAxis->SetHelpString(wxT(""));
    m_pgProplineAxis->SetEditor( wxT("Choice") );
    
    m_pgPropChartProp = m_pgMgr->Append(  new wxPropertyCategory( _("Chart properties") ) );
    m_pgPropChartProp->SetHelpString(wxT(""));
    
    m_pgPropChartTitle = m_pgMgr->AppendIn( m_pgPropChartProp,  new wxStringProperty( _("Chart title"), wxPG_LABEL, wxT("")) );
    m_pgPropChartTitle->SetHelpString(wxT(""));
    m_pgPropChartTitle->SetEditor( wxT("TextCtrl") );
    
    m_pgPropXLabel = m_pgMgr->AppendIn( m_pgPropChartProp,  new wxStringProperty( _("X axis label"), wxPG_LABEL, wxT("")) );
    m_pgPropXLabel->SetHelpString(wxT(""));
    m_pgPropXLabel->SetEditor( wxT("TextCtrl") );
    
    m_pgPropYLabel = m_pgMgr->AppendIn( m_pgPropChartProp,  new wxStringProperty( _("Y axis label"), wxPG_LABEL, wxT("")) );
    m_pgPropYLabel->SetHelpString(wxT(""));
    m_pgPropYLabel->SetEditor( wxT("TextCtrl") );
    
    m_pgPropMargins = m_pgMgr->AppendIn( m_pgPropChartProp,  new wxStringProperty( _("Margins"), wxPG_LABEL, wxT("")) );
    m_pgPropMargins->SetHelpString(wxT(""));
    
    m_pgPropMarginsUp = m_pgMgr->AppendIn( m_pgPropMargins,  new wxIntProperty( _("Up"), wxPG_LABEL, 20) );
    m_pgPropMarginsUp->SetHelpString(wxT(""));
    
    m_pgPropMarginsBot = m_pgMgr->AppendIn( m_pgPropMargins,  new wxIntProperty( _("Botton"), wxPG_LABEL, 40) );
    m_pgPropMarginsBot->SetHelpString(wxT(""));
    
    m_pgPropMarginsLeft = m_pgMgr->AppendIn( m_pgPropMargins,  new wxIntProperty( _("Left"), wxPG_LABEL, 60) );
    m_pgPropMarginsLeft->SetHelpString(wxT(""));
    
    m_pgPropMarginsRight = m_pgMgr->AppendIn( m_pgPropMargins,  new wxIntProperty( _("Right"), wxPG_LABEL, 10) );
    m_pgPropMarginsRight->SetHelpString(wxT(""));
    
    m_pgPropAxisLimit = m_pgMgr->AppendIn( m_pgPropChartProp,  new wxStringProperty( _("Axis limit"), wxPG_LABEL, wxT("")) );
    m_pgPropAxisLimit->SetHelpString(wxT(""));
    
    m_pgPropXMin = m_pgMgr->AppendIn( m_pgPropAxisLimit,  new wxFloatProperty( _("X min"), wxPG_LABEL, 0) );
    m_pgPropXMin->SetHelpString(wxT(""));
    
    m_pgPropXMax = m_pgMgr->AppendIn( m_pgPropAxisLimit,  new wxFloatProperty( _("X max"), wxPG_LABEL, 1) );
    m_pgPropXMax->SetHelpString(wxT(""));
    
    m_pgPropYMin = m_pgMgr->AppendIn( m_pgPropAxisLimit,  new wxFloatProperty( _("Y min"), wxPG_LABEL, 0) );
    m_pgPropYMin->SetHelpString(wxT(""));
    
    m_pgPropYMax = m_pgMgr->AppendIn( m_pgPropAxisLimit,  new wxFloatProperty( _("Y max"), wxPG_LABEL, 1) );
    m_pgPropYMax->SetHelpString(wxT(""));
    m_pgMgr->SetMinSize(wxSize(250,250));
    
    SetName(wxT("ChartViewBase"));
    SetSize(wxDLG_UNIT(this, wxSize(-1,-1)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
    // Connect events
    this->Bind(wxEVT_SIZE, &ChartViewBase::OnResize, this);
    this->Bind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuSaveImageClick, this,m_menuItemSaveImage->GetId());
    this->Bind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuSendClipClick, this,m_menuItemSendToClipboard->GetId());
    this->Bind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuExpCSVClick, this,m_menuItemExportCSV->GetId());
    this->Bind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuExitClick, this,m_menuItemExit->GetId());
    this->Bind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuFitClick, this,m_menuItemFit->GetId());
    this->Bind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuShowGridClick, this,m_menuItemShowGrid->GetId());
    this->Bind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuShowLabelClick, this,m_menuItemShowLabel->GetId());
    this->Bind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuShowCoordinatesClick, this,m_menuItemShowCoordinates->GetId());
    this->Bind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuDarkThemeClick, this,m_menuItemDarkTheme->GetId());
    m_treeCtrl->Bind(wxEVT_COMMAND_TREE_ITEM_ACTIVATED, &ChartViewBase::OnTreeItemActivated, this);
    m_treeCtrl->Bind(wxEVT_COMMAND_TREE_SEL_CHANGED, &ChartViewBase::OnTreeItemSelectionChanged, this);
    m_pgMgr->Bind(wxEVT_PG_CHANGED, &ChartViewBase::OnPropertyGridChange, this);
    
}

ChartViewBase::~ChartViewBase()
{
    this->Unbind(wxEVT_SIZE, &ChartViewBase::OnResize, this);
    this->Unbind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuSaveImageClick, this,m_menuItemSaveImage->GetId());
    this->Unbind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuSendClipClick, this,m_menuItemSendToClipboard->GetId());
    this->Unbind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuExpCSVClick, this,m_menuItemExportCSV->GetId());
    this->Unbind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuExitClick, this,m_menuItemExit->GetId());
    this->Unbind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuFitClick, this,m_menuItemFit->GetId());
    this->Unbind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuShowGridClick, this,m_menuItemShowGrid->GetId());
    this->Unbind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuShowLabelClick, this,m_menuItemShowLabel->GetId());
    this->Unbind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuShowCoordinatesClick, this,m_menuItemShowCoordinates->GetId());
    this->Unbind(wxEVT_COMMAND_MENU_SELECTED, &ChartViewBase::OnMenuDarkThemeClick, this,m_menuItemDarkTheme->GetId());
    m_treeCtrl->Unbind(wxEVT_COMMAND_TREE_ITEM_ACTIVATED, &ChartViewBase::OnTreeItemActivated, this);
    m_treeCtrl->Unbind(wxEVT_COMMAND_TREE_SEL_CHANGED, &ChartViewBase::OnTreeItemSelectionChanged, this);
    m_pgMgr->Unbind(wxEVT_PG_CHANGED, &ChartViewBase::OnPropertyGridChange, this);
    
}
