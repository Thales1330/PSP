//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: Workspace.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "WorkspaceBase.h"


// Declare the bitmap loading function
extern void wxC52C4InitBitmapResources();


namespace {
// return the wxBORDER_SIMPLE that matches the current application theme
wxBorder get_border_simple_theme_aware_bit() {
#if wxVERSION_NUMBER >= 3300 && defined(__WXMSW__)
    return wxSystemSettings::GetAppearance().IsDark() ? wxBORDER_SIMPLE : wxBORDER_STATIC;
#else
    return wxBORDER_DEFAULT;
#endif
} // DoGetBorderSimpleBit
bool bBitmapLoaded = false;
} // namespace


WorkspaceBase::WorkspaceBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC52C4InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer_lvl_1_1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer_lvl_1_1);
    
    m_workspacePanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    boxSizer_lvl_1_1->Add(m_workspacePanel, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_timer = new wxTimer;
    m_timer->Start(1500, false);
    
    m_timerHeatMap = new wxTimer;
    m_timerHeatMap->Start(500, false);
    
    SetName(wxT("WorkspaceBase"));
    SetSize(wxDLG_UNIT(this, wxSize(500,300)));
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_workspacePanel->Bind(wxEVT_KEY_DOWN, &WorkspaceBase::OnKeyDown, this);
    m_workspacePanel->Bind(wxEVT_LEFT_DOWN, &WorkspaceBase::OnLeftClickDown, this);
    m_workspacePanel->Bind(wxEVT_LEFT_UP, &WorkspaceBase::OnLeftClickUp, this);
    m_workspacePanel->Bind(wxEVT_LEFT_DCLICK, &WorkspaceBase::OnLeftDoubleClick, this);
    m_workspacePanel->Bind(wxEVT_MIDDLE_DOWN, &WorkspaceBase::OnMiddleDown, this);
    m_workspacePanel->Bind(wxEVT_MIDDLE_UP, &WorkspaceBase::OnMiddleUp, this);
    m_workspacePanel->Bind(wxEVT_MIDDLE_DCLICK, &WorkspaceBase::OnMiddleDoubleClick, this);
    m_workspacePanel->Bind(wxEVT_RIGHT_DOWN, &WorkspaceBase::OnRightClickDown, this);
    m_workspacePanel->Bind(wxEVT_MOTION, &WorkspaceBase::OnMouseMotion, this);
    m_workspacePanel->Bind(wxEVT_MOUSEWHEEL, &WorkspaceBase::OnScroll, this);
    m_workspacePanel->Bind(wxEVT_PAINT, &WorkspaceBase::OnPaint, this);
    m_workspacePanel->Bind(wxEVT_SIZE, &WorkspaceBase::OnResize, this);
    m_workspacePanel->Bind(wxEVT_IDLE, &WorkspaceBase::OnIdle, this);
    m_timer->Bind(wxEVT_TIMER, &WorkspaceBase::OnTimer, this);
    m_timerHeatMap->Bind(wxEVT_TIMER, &WorkspaceBase::OnHeatMapTime, this);
    
}

WorkspaceBase::~WorkspaceBase()
{
    m_workspacePanel->Unbind(wxEVT_KEY_DOWN, &WorkspaceBase::OnKeyDown, this);
    m_workspacePanel->Unbind(wxEVT_LEFT_DOWN, &WorkspaceBase::OnLeftClickDown, this);
    m_workspacePanel->Unbind(wxEVT_LEFT_UP, &WorkspaceBase::OnLeftClickUp, this);
    m_workspacePanel->Unbind(wxEVT_LEFT_DCLICK, &WorkspaceBase::OnLeftDoubleClick, this);
    m_workspacePanel->Unbind(wxEVT_MIDDLE_DOWN, &WorkspaceBase::OnMiddleDown, this);
    m_workspacePanel->Unbind(wxEVT_MIDDLE_UP, &WorkspaceBase::OnMiddleUp, this);
    m_workspacePanel->Unbind(wxEVT_MIDDLE_DCLICK, &WorkspaceBase::OnMiddleDoubleClick, this);
    m_workspacePanel->Unbind(wxEVT_RIGHT_DOWN, &WorkspaceBase::OnRightClickDown, this);
    m_workspacePanel->Unbind(wxEVT_MOTION, &WorkspaceBase::OnMouseMotion, this);
    m_workspacePanel->Unbind(wxEVT_MOUSEWHEEL, &WorkspaceBase::OnScroll, this);
    m_workspacePanel->Unbind(wxEVT_PAINT, &WorkspaceBase::OnPaint, this);
    m_workspacePanel->Unbind(wxEVT_SIZE, &WorkspaceBase::OnResize, this);
    m_workspacePanel->Unbind(wxEVT_IDLE, &WorkspaceBase::OnIdle, this);
    m_timer->Unbind(wxEVT_TIMER, &WorkspaceBase::OnTimer, this);
    m_timerHeatMap->Unbind(wxEVT_TIMER, &WorkspaceBase::OnHeatMapTime, this);
    
    m_timer->Stop();
    wxDELETE( m_timer );

    m_timerHeatMap->Stop();
    wxDELETE( m_timerHeatMap );

}
